## ---------------------------------------------------------
##  Check that all calibration hits have correct identifiers
## ---------------------------------------------------------

##  Preparation
## -------------
## In file TileGeoG4CalibSD.h uncomment line: #define HITSINFO
## select hit output format (txt or NTuple or both) and mode of 
## hit generation (for all IDCalculators - 0 or for one selected from 1-6):
    #define doHitsTXT  false
    #define doHitsNTup true
    #define IDcalc     0    //1-6, 0-all

## make package TileGeoG4Calib


##  Simulation
## -----------
## 10 GeV pion, 100 events, enable calibration hits and ntuple with detailed hit info (can take up to hour to run)
athena.py -s -c "EvtMax=100; PID=211; E=10000; CalibrationRun=True; HitInfo=True; " TileSimEx/jobOptions.G4Atlas_Tile.py >& sim.log


##  Drawing of Geometry with TileCalibHit
## ---------------------------------------
# take *.C files from TileGeoG4Calib/test directory
root testHitsTXT.C    ## analysis by default: file - hits.txt, Z_R figure, all IDCalculators
root testHitsNtup.C   ## analysis by default: file - Hits.Ntup.root, Z_R figure, all IDCalculators

## another examples:
root
root[] .x testHitsTXT.C("hits.txt",0,0)  ## draw a file hits.txt, Z_R figure all IDCalculators (the same as default)
root[] .x testHitsNtup.C("Hits.Ntup.root",1,1)      ## draw a file Hits.Ntup.root, 1-Z_R - only Barrel, 1-CellIDCalculator
root[] .x testHitsNtup.C("Hits.Ntup100.root",11,2)  ## draw a file Hits.Ntup100.root, 11-Z_R - zoom in Barrel (det1,reg1), 2-ScintIDCalculator
root[] .x testHitsNtup.C("Hits.Ntup500.root",24,5)  ## draw a file Hits.Ntup500.root, 24-Z_R - zoom in Ext.Barrel (det2,reg4), 5-DefaultHitIDCalculator-Cell hit

## Detector and zoom possibilities:
## 0 - Z_R-Tile - full TileCal
## 1 - Z_R-Barrel; 2 - Z_R-Ext.Barrel -- all with abs(Z)
## 11,...,17 - zoom in Barrel regions 1-7 (with abs(Z))
## 21,...,27 - zoom in Posirive Ext.Barrel regions 1-7
## -21,...,-27 - zoom in Negative Ext.Barrel regions 1-7

## Calculator possibilities (IDcalc): 
## 0-All IDCalculators, 1-CellIDCalculator, 2-ScintIDCalculator,
## 3-PlateCellIDCalculator, 4-GirderCellIDCalculator,
## 5-DefaultHitIDCalculator-Cell hit, 6-DefaultHitIDCalculator-DM hit


## ----------------------------------------------
##  Testing geometry for overlaps using GDML file
## ----------------------------------------------

1. Create GDML file like this:

rm -rf Tile.gdml gdml.log
athena.py -c "EvtMax=1; PID=12; GDML=True; File='DUMMY'; " TileSimEx/jobOptions.G4Atlas_Tile.py >& gdml.log

2. start ROOT and load GDML file

root
root [0] TGeoManager::Import("Tile.gdml")
root [1] gGeoManager->CheckOverlaps(0.001)
root [2] gGeoManager->PrintOverlaps()

3. to visialize TileCal in ROOT - start TBrowser:

root [3] TBrowser b;

in browser:
View->ViewWith->OpenGL

then in left tree in browser showing all objects in ROOT memory
find "Default" and navigate down

Default->CALO::CALO->Tile ....

right-click on any volume name choose "DrawClone" and press "OK" in pop-up window

