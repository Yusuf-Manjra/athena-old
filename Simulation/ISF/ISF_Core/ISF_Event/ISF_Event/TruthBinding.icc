/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

// this file contains all ITruthBinding inline methods

namespace ISF {
  /** constructor setting all truth particle pointers to the given particle */
  TruthBinding::TruthBinding(HepMC::GenParticlePtr allTruthP) :
    m_truthParticle(allTruthP),
    m_primaryTruthParticle(allTruthP),
    m_generationZeroTruthParticle(allTruthP) { }

  /** constructor setting all truth particle pointers individually */
  TruthBinding::TruthBinding(HepMC::GenParticlePtr truthP, HepMC::GenParticlePtr primaryTruthP, HepMC::GenParticlePtr genZeroTruthP) :
    m_truthParticle(truthP),
    m_primaryTruthParticle(primaryTruthP),
    m_generationZeroTruthParticle(genZeroTruthP) { }

  /** copy constructor */
  TruthBinding::TruthBinding(const TruthBinding &rhs) :
    m_truthParticle(rhs.getTruthParticle()),
    m_primaryTruthParticle(rhs.getPrimaryTruthParticle()),
    m_generationZeroTruthParticle(rhs.getGenerationZeroTruthParticle()) { }

  /** move copy constructor */
  TruthBinding::TruthBinding(TruthBinding&& rhs) :
    m_truthParticle(rhs.getTruthParticle()),
    m_primaryTruthParticle(rhs.getPrimaryTruthParticle()),
    m_generationZeroTruthParticle(rhs.getGenerationZeroTruthParticle()) { }

  /** assignment operator */
  TruthBinding& TruthBinding::operator=(const TruthBinding &rhs) {
    m_truthParticle=rhs.getTruthParticle();
    m_primaryTruthParticle=rhs.getPrimaryTruthParticle();
    m_generationZeroTruthParticle=rhs.getGenerationZeroTruthParticle();
    return *this;
  }

  /** move assignment operator */
  TruthBinding& TruthBinding::operator=(TruthBinding&& rhs) {
    m_truthParticle=rhs.getTruthParticle();
    m_primaryTruthParticle=rhs.getPrimaryTruthParticle();
    m_generationZeroTruthParticle=rhs.getGenerationZeroTruthParticle();
    return *this;
  }

  /** destructor */
  TruthBinding::~TruthBinding() { }

  /** comparison operator */
  bool TruthBinding::operator==(const TruthBinding& rhs) const {
    return isEqual(rhs);
  }

  /** check equality */
  bool TruthBinding::isEqual(const TruthBinding& rhs) const {
    bool pass = true;

    const auto rhsTruth = rhs.getTruthParticle();
    if (m_truthParticle && rhsTruth) {
#ifdef HEPMC3
      pass &= (m_truthParticle == rhsTruth);
#else
      pass &= *m_truthParticle == *rhsTruth;
#endif
    } else {
      return false;
    }

    const auto rhsPrimary = rhs.getPrimaryTruthParticle();
    if (m_primaryTruthParticle && rhsPrimary) {
#ifdef HEPMC3
      pass &= (m_primaryTruthParticle == rhsPrimary);
#else
      pass &= *m_primaryTruthParticle == *rhsPrimary;
#endif
    } else {
      return false;
    }

    const auto rhsGenZero = rhs.getGenerationZeroTruthParticle();
    if (m_generationZeroTruthParticle && rhsGenZero) {
#ifdef HEPMC3
      pass &= (m_generationZeroTruthParticle == rhsGenZero);
#else
      pass &= *m_generationZeroTruthParticle == *rhsGenZero;
#endif
    } else {
      return false;
    }

    return pass;
  }

  /** check identity */
  bool TruthBinding::isIdent(const TruthBinding& rhs) const {
    bool pass = true;
    pass &= m_truthParticle == rhs.getTruthParticle();
    pass &= m_primaryTruthParticle == rhs.getPrimaryTruthParticle();
    pass &= m_generationZeroTruthParticle == rhs.getGenerationZeroTruthParticle();
    return pass;
  }

  /** pointer to the particle in the simulation truth */
  HepMC::GenParticlePtr TruthBinding::getTruthParticle() const { return m_truthParticle; }
  void                TruthBinding::setTruthParticle(HepMC::GenParticlePtr p) { m_truthParticle = p; }

  /** pointer to the primary particle in the simulation truth */
  HepMC::GenParticlePtr TruthBinding::getPrimaryTruthParticle() const { return m_primaryTruthParticle; }

  /** pointer to the simulation truth particle before any regeneration (eg. brem) */
  HepMC::GenParticlePtr TruthBinding::getGenerationZeroTruthParticle() const { return m_generationZeroTruthParticle; }
  void                TruthBinding::setGenerationZeroTruthParticle(HepMC::GenParticlePtr p) { m_generationZeroTruthParticle = p; }

} // end ISF namespace
