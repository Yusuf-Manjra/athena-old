/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

#include "CxxUtils/CachedUniquePtr.h"
#include <stdexcept>
class GeoStraightAccSection::Clockwork {

public:

  Clockwork():r1(NULL){};

  ~Clockwork() { 
  }

  void buildSmallCache();


  class Rep1 {

  public:

   double xcent[1024][14];
   double ycent[1024][14];
   double cosu[1024][14];
   double sinu[1024][14];
   double halfLength[1024][14];

  }; 

  class Rep2 {

  public:

    std::unique_ptr<GeoXF::Function> transfunction[14];
    double           halfLength[14];
  };

  CxxUtils::CachedUniquePtrT<Rep1> r1;
  std::unique_ptr<Rep2> r2;

  const Rep1& getFastCache() const;
  Rep1& getWritableFastCache();
  Rep2& getWritableSmallCache();

private:
  void fillFastCache (Rep1& rep1) const;
  
  Clockwork( const Clockwork &); 

  Clockwork & operator = ( const Clockwork &); 
};


inline
const GeoStraightAccSection::Clockwork::Rep1&
GeoStraightAccSection::Clockwork::getFastCache() const
{
  if (!r1) {
    auto rep = std::make_unique<Rep1>();
    fillFastCache (*rep);
    r1.set (std::move (rep));
  }
  return *r1.get();
}


inline
GeoStraightAccSection::Clockwork::Rep1&
GeoStraightAccSection::Clockwork::getWritableFastCache()
{
  if (r2) throw std::runtime_error("Error in GeoStraightAccSection: Illegal Modification Sequence");
  if (!r1) {
    r1.store (std::make_unique<Rep1>());
  }
  return *r1.get();
}


inline
GeoStraightAccSection::Clockwork::Rep2&
GeoStraightAccSection::Clockwork::getWritableSmallCache()
{
  if (r1) throw std::runtime_error("Error in GeoStraightAccSection: Illegal Modification Sequence");
  if (!r2) buildSmallCache();
  return *r2;
}


inline const double & GeoStraightAccSection::XCent(int stackid, int cellid)   const
{
  return m_c->getFastCache().xcent[stackid][cellid];
}
inline const double & GeoStraightAccSection::YCent(int stackid, int cellid)   const
{
  return m_c->getFastCache().ycent[stackid][cellid];
}
inline const double & GeoStraightAccSection::Sinu(int stackid, int cellid)       const
{
  return m_c->getFastCache().sinu[stackid][cellid];
}
inline const double & GeoStraightAccSection::Cosu(int stackid, int cellid)       const
{
  return m_c->getFastCache().cosu[stackid][cellid];
}
inline const double & GeoStraightAccSection::HalfLength(int stackid, int cellid)   const
{
  return m_c->getFastCache().halfLength[stackid][cellid];
}

