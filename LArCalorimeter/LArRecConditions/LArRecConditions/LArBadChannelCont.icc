//Dear emacs, this is -*-c++-*-
/*
  Copyright (C) 2002-2018 CERN for the benefit of the ATLAS collaboration
*/


//Constructor with payload
template<class LArBC_t>
LArBadXCont<LArBC_t>::LArBadXCont( const BadChanVec& vec): 
  m_cont(vec) {
  sort();
}

//Add a bad channel to the list of bad channels (no sorting!)
template<class LArBC_t>
void LArBadXCont<LArBC_t>::add(const HWIdentifier hwid, const LArBC_t stat) {
  m_cont.push_back(std::make_pair(hwid.get_identifier32().get_compact(),stat));
  return;
}

template<class LArBC_t>
void LArBadXCont<LArBC_t>::setOflVec(BadChanVec& input) {
  m_oflCont.swap(input);
  std::sort(m_oflCont.begin(), m_oflCont.end(), ChannelLess());
  return;
}

//Sorting method (call before recording!) 
template<class LArBC_t>
void LArBadXCont<LArBC_t>::sort() {
  std::sort(m_cont.begin(), m_cont.end(), ChannelLess());

  //Merge duplicate entries is needed ...
  if (m_cont.size()>1) { //got at least 2 entries
    auto it=m_cont.begin();
    while (it+1!=m_cont.end()) {
      auto it2=it+1;
      if (it->first==it2->first) {//Same channel number
	it2->second|=it->second;  //Merge (logical-or) bad channel status ...
	it=m_cont.erase(it);   //... and delete first instance
      }
      else
	++it;
    }
  }//end if got at least 2 entries
}  

//Main client acess method: Check the bad-channel status
template<class LArBC_t>
LArBC_t LArBadXCont<LArBC_t>::status(const HWIdentifier hwid) const {

  const ChanId_t channel=hwid.get_identifier32().get_compact();

  const_iterator i = 
    std::lower_bound( m_cont.begin(), m_cont.end(), BadChanEntry( channel,(LArBC_t) 0),
		      ChannelLess());
  if (i != m_cont.end() && i->first == channel) {
    return i->second;
  }
  else {
    return LArBC_t(0);
  }
}

//Client acess method: Check the bad-channel status by offline id
template<class LArBC_t>
LArBC_t LArBadXCont<LArBC_t>::offlineStatus(const Identifier id) const {

  const ChanId_t channel=id.get_identifier32().get_compact();

  const_iterator i = 
    std::lower_bound( m_oflCont.begin(), m_oflCont.end(), BadChanEntry( channel,(LArBC_t) 0),
		      ChannelLess());
  if (i != m_oflCont.end() && i->first == channel) {
    return i->second;
  }
  else {
    return LArBC_t(0);
  }
}
