#!/usr/bin/env python

# Copyright (C) 2002-2018 CERN for the benefit of the ATLAS collaboration
import os, sys, re, ROOT, argparse
from math import fabs


def DrawTLatex(x, y, text, size=18, font=43, align=11):
    tex = ROOT.TLatex()
    tex.SetTextAlign(align)
    tex.SetTextSize(size)
    tex.SetTextFont(font)
    tex.SetNDC()
    tex.DrawLatex(x, y, text)



def saveHisto(plot_options, histo):
    if not histo.GetEntries(): return False
    
    Canvas_Name = "Isolation_%s_%s"%("Corr" if options.useCorrectedCones else "Orig" ,
                                        histo.GetName())
    c1 = ROOT.TCanvas(Canvas_Name, "canvas", 800 , 600)
    
    c1.cd()
    c1.SetTopMargin(0.13)
    if histo.GetDimension() == 2:
        c1.SetRightMargin(0.15)
        c1.SetLeftMargin(0.12)
    if histo.GetDimension() == 1: 
        histo.SetLineColor(ROOT.kRed)
        histo.SetLineWidth(2)
        
        histo.Draw()
    else: histo.Draw("colz")
    DrawTLatex(c1.GetLeftMargin(), 0.92,"%s (%s)" %(histo.GetTitle(), "corrected" if plot_options.useCorrectedCones else "vanilla") )
    
    c1.SaveAs("%s/%s.pdf"%(options.outDir, Canvas_Name))
    c1.SaveAs("%s/AllIsolationPlots_%s.pdf"%(options.outDir, "Corr" if options.useCorrectedCones else "Orig" ))
    
    return True
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='This script generates validation plots of the isolation correction tool. For more help type \"python plotIsoValidation.py -h\"',
                                     prog='plotIsoValidation',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
   
    parser.add_argument("--inFile", help="Where is the input generated by the IsolationCorrection test alg 'IsolationSelection/testIsoCloseByCorr_jobOptions.py'",
                       default="IsoCorrectionTester.root")
    parser.add_argument("--outDir", help = "Output directory of the final plots", default="Plots/")
    parser.add_argument("--useCorrectedCones", help="", action ='store_true', default=False)
    options = parser.parse_args()
   
    if not os.path.exists(options.inFile):
       print "ERROR: There is no file %s"%(options.inFile)
       exit(1)
    
    inFile = ROOT.TFile.Open(options.inFile, "READ")
    if not inFile or not inFile.IsOpen():
        print "ERROR: ROOT file %s is invalid please check whether the test job processed successfully"%(options.inFile)
        exit(1)
    
    anaTree = inFile.Get("IsoCorrTest")
    if not anaTree:
        print "ERROR: Where is my Testing tree in file %s"%(options.inFile)
        exit(1)
    ###################################################################
    # Prepare the histograms to be filled in the simple analysis.
    ###################################################################
    Elec_Track_Iso = ROOT.TH1D("elec_track_iso", "track isolation", 55, -5, 50)
    Elec_Track_Iso.GetXaxis().SetTitle(" p_{T}^{TrackIsolation} (electrons) [GeV]")
    Elec_Calo_Iso = ROOT.TH1D("elec_calo_iso", "calorimeter isolation", 55, -5, 50)
    Elec_Calo_Iso.GetXaxis().SetTitle(" E_{T}^{CaloIsolation} (electrons) [GeV]")
    
    Muon_Track_Iso = ROOT.TH1D("muon_track_iso", "track isolation", 55, -5, 50)
    Muon_Track_Iso.GetXaxis().SetTitle(" p_{T}^{TrackIsolation} (muons) [GeV]")
    Muon_Calo_Iso = ROOT.TH1D("muon_calo_iso", "calorimeter isolation", 55, -5, 50)
    Muon_Calo_Iso.GetXaxis().SetTitle(" E_{T}^{CaloIsolation} (muons) [GeV]")

    ### Isolation / pt of the particles
    Elec_RelTrack_Iso = ROOT.TH1D("elec_rel_track_iso", "track isolation", 52, -0.04, 1)
    Elec_RelTrack_Iso.GetXaxis().SetTitle("p_{T}^{TrackIsolation} / p_{T} (electrons)")
    Elec_RelCalo_Iso = ROOT.TH1D("elec_rel_calo_iso", "track isolation", 52, -0.04, 1)
    Elec_RelCalo_Iso.GetXaxis().SetTitle("E_{T}^{CaloIsolation} / p_{T} (electrons)")
    
    Muon_RelTrack_Iso = ROOT.TH1D("muon_rel_track_iso", "track isolation", 52, -0.04, 1)
    Muon_RelTrack_Iso.GetXaxis().SetTitle("p_{T}^{TrackIsolation} / p_{T} (muons)")
    Muon_RelCalo_Iso = ROOT.TH1D("muon_rel_calo_iso", "track isolation", 52, -0.04, 1)
    Muon_RelCalo_Iso.GetXaxis().SetTitle("E_{T}^{CaloIsolation} / p_{T} (muons)")
    
    ### Isolation / track of the closest particle --- deltaR
    Elec_Track_polution_dR = ROOT.TH2D("elec_track_polution_dR", "track_isolaiton against dR",50, 0, 0.5, 100, -1.5, 1.5 )
    Elec_Track_polution_dR.GetXaxis().SetTitle("#Delta R (e, #it{l})")
    Elec_Track_polution_dR.GetYaxis().SetTitle("p_{T}^{TrackIsolation}(electrons) / p_{T}( Associated close-by track)")
    
    Elec_Topo_polution_dR = ROOT.TH2D("elec_calo_polution_dR", "calorimeter isolation against dR",50, 0, 0.5, 100, -1.5, 1.5)
    Elec_Topo_polution_dR.GetXaxis().SetTitle("#Delta R (e, #it{l})")
    Elec_Topo_polution_dR.GetYaxis().SetTitle("E_{T}^{CaloIsolation} (electrons) / E_{T}( Associated close-by cluster)")
    
    Muon_Track_polution_dR = ROOT.TH2D("muon_track_polution_dR", "track_isolaiton against dR", 50, 0, 0.5, 100, -1.5, 1.5)
    Muon_Track_polution_dR.GetXaxis().SetTitle("#Delta R (#mu, #it{l})")
    Muon_Track_polution_dR.GetYaxis().SetTitle("p_{T}^{TrackIsolation}(muons) / p_{T}( Associated close-by track)")
    
    Muon_Topo_polution_dR = ROOT.TH2D("muon_calo_polution_dR", "calorimeter isolation against dR", 50, 0, 0.5, 100, -1.5, 1.5)
    Muon_Topo_polution_dR.GetXaxis().SetTitle("#Delta R (#mu, #it{l})")
    Muon_Topo_polution_dR.GetYaxis().SetTitle("E_{T}^{CaloIsolation} (muons) / E_{T}( Associated close-by cluster)")
    
    N_Isolated_Muon = ROOT.TH1D("N_muons", "Isolated #mu", 6, 0, 6);
    N_Isolated_Muon.GetXaxis().SetTitle("N(#mu) - passing iso WP" );
    
    N_Isolated_Elec = ROOT.TH1D("N_elec", "Elec #mu", 6, 0, 6);
    N_Isolated_Elec.GetXaxis().SetTitle("N(e) - passing iso WP");
    
    AllHistos = [Elec_Track_Iso, 
                 Elec_Calo_Iso ,  
                 Muon_Track_Iso, 
                 Muon_Calo_Iso, 
                 Elec_RelTrack_Iso, 
                 Muon_RelTrack_Iso,
                 Elec_RelCalo_Iso, 
                 Muon_RelCalo_Iso,
                 Elec_Track_polution_dR, 
                 Elec_Topo_polution_dR,
                 Muon_Track_polution_dR,
                 Muon_Topo_polution_dR ,
                 N_Isolated_Muon,
                 N_Isolated_Elec,
                 ]
    treeReader = ROOT.TTreeReader("IsoCorrTest", inFile)
    branch_names = [ B.GetName() for B in anaTree.GetListOfBranches() ]
    ### Find the isolation variables in the list of branches
    mu_trk_cone_names = [b [ b.find("Corr" if options.useCorrectedCones else "Orig") + 5 :] for b in branch_names if b.find("Muons_%s_pt"%("Corr" if options.useCorrectedCones else "Orig")) != -1]
    mu_calo_cone_names =  [ b [ b.find("Corr" if options.useCorrectedCones else "Orig") + 5 :] for b in branch_names if b.find("Muons_%s_topo"%("Corr" if options.useCorrectedCones else "Orig")) != -1 or
                                                       b.find("Muons_%s_neflow"%("Corr" if options.useCorrectedCones else "Orig")) != -1 
                                                    ]
   
    el_trk_cone_names = [ b [ b.find("Corr" if options.useCorrectedCones else "Orig") + 5 :] for b in branch_names if b.find("Electrons_%s_pt"%("Corr" if options.useCorrectedCones else "Orig")) != -1]
    el_calo_cone_names =  [ b [ b.find("Corr" if options.useCorrectedCones else "Orig") + 5 :] for b in branch_names if b.find("Electrons_%s_topo"%("Corr" if options.useCorrectedCones else "Orig")) != -1 or
                                                       b.find("Electrons_%s_neflow"%("Corr" if options.useCorrectedCones else "Orig")) != -1 
                          ]
   
    if len (el_calo_cone_names) > 0:
        for H in [H for H in AllHistos if H.GetName().find("elec") != -1 and H.GetName().find("calo") != -1]: H.SetTitle(el_calo_cone_names[0])
    if len (el_trk_cone_names) > 0:
        for H in [H for H in AllHistos if H.GetName().find("elec") != -1 and H.GetName().find("track") != -1]: H.SetTitle(el_trk_cone_names[0])
    if len (mu_calo_cone_names) > 0:
        for H in [H for H in AllHistos if H.GetName().find("muon") != -1 and H.GetName().find("calo") != -1]: H.SetTitle(mu_calo_cone_names[0])
    if len (mu_trk_cone_names) > 0:
        for H in [H for H in AllHistos if H.GetName().find("muon") != -1 and H.GetName().find("track") != -1]: H.SetTitle(mu_trk_cone_names[0])
   
   
    mu_pt = ROOT.TTreeReaderArray(float)(treeReader,  "Muons_pt")
    mu_eta = ROOT.TTreeReaderArray(float)(treeReader, "Muons_eta")
    mu_phi = ROOT.TTreeReaderArray(float)(treeReader, "Muons_phi")
    mu_trk = ROOT.TTreeReaderArray(float)(treeReader, "Muons_trackPt")
    
    mu_clu = ROOT.TTreeReaderArray(float)(treeReader, "Muons_clusterEt")
    mu_clu_eta = ROOT.TTreeReaderArray(float)(treeReader, "Muons_clusterEta")
    mu_clu_phi = ROOT.TTreeReaderArray(float)(treeReader, "Muons_clusterPhi")
    
    
    mu_trk_iso =  ROOT.TTreeReaderArray(float)(treeReader,  "Muons_%s_%s"%("Corr" if options.useCorrectedCones else "Orig", mu_trk_cone_names[0])) if len(mu_trk_cone_names) > 0 else None
    mu_calo_iso =  ROOT.TTreeReaderArray(float)(treeReader, "Muons_%s_%s"%("Corr" if options.useCorrectedCones else "Orig",mu_calo_cone_names[0])) if len (mu_calo_cone_names) > 0 else None
            
    el_pt = ROOT.TTreeReaderArray(float)(treeReader,  "Electrons_pt")
    el_eta = ROOT.TTreeReaderArray(float)(treeReader, "Electrons_eta")
    el_phi = ROOT.TTreeReaderArray(float)(treeReader, "Electrons_phi")
    el_trk = ROOT.TTreeReaderArray(float)(treeReader, "Electrons_trackPt")
    el_clu = ROOT.TTreeReaderArray(float)(treeReader, "Electrons_clusterEt")
    el_clu_eta = ROOT.TTreeReaderArray(float)(treeReader, "Electrons_clusterEta")
    el_clu_phi = ROOT.TTreeReaderArray(float)(treeReader, "Electrons_clusterPhi")
    
    el_trk_iso =  ROOT.TTreeReaderArray(float)(treeReader,  "Electrons_%s_%s"%("Corr" if options.useCorrectedCones else "Orig", el_trk_cone_names[0])) if len(el_trk_cone_names) > 0 else None
    el_calo_iso =  ROOT.TTreeReaderArray(float)(treeReader, "Electrons_%s_%s"%("Corr" if options.useCorrectedCones else "Orig",el_calo_cone_names[0])) if len(el_calo_cone_names) > 0 else None
    
    el_pass_iso =  ROOT.TTreeReaderArray(bool)(treeReader,  "Muons_%sPassIso"%("Corr" if options.useCorrectedCones else "Orig"))
    mu_pass_iso =  ROOT.TTreeReaderArray(bool)(treeReader, "Electrons_%sPassIso"%("Corr" if options.useCorrectedCones else "Orig"))
        
    
    while treeReader.Next():
        muon_t_vec = []
        elec_t_vec = []
        
        elec_t_calo_vec = []
        muon_t_calo_vec = []
       
        N_Isolated_Elec.Fill(len([i for i in range(el_pass_iso.GetSize()) if el_pass_iso[i] == True]))
        N_Isolated_Muon.Fill(len([i for i in range(mu_pass_iso.GetSize()) if mu_pass_iso[i] == True]))
        
        for m in range(mu_pt.GetSize()):
            mu = ROOT.TLorentzVector()
            mu.SetPtEtaPhiM( mu_pt[m], mu_eta[m], mu_phi[m], 0)
            muon_t_vec += [mu]
            calo_mu = ROOT.TLorentzVector()
            calo_mu.SetPtEtaPhiM( mu_clu[m], mu_clu_eta[m], mu_clu_phi[m], 0)
            muon_t_calo_vec += [calo_mu]
    
        for e in range(el_pt.GetSize()):
            el = ROOT.TLorentzVector()
            el.SetPtEtaPhiM( el_pt[e], el_eta[e], el_phi[e], 0)
            elec_t_vec += [el]
            calo_el = ROOT.TLorentzVector()
            calo_el.SetPtEtaPhiM( el_clu[e], el_clu_eta[e], el_clu_phi[e], 0)
            elec_t_calo_vec += [calo_el]
        ### Fill the muon histogram
        for m, mu in enumerate(muon_t_vec):
            if mu_trk_iso:
                Muon_Track_Iso.Fill(mu_trk_iso[m] / 1.e3)
                Muon_RelTrack_Iso.Fill( mu_trk_iso[m]/ mu.Pt())
            if mu_calo_iso:
                Muon_Calo_Iso.Fill(mu_calo_iso[m] / 1.e3)
                Muon_RelTrack_Iso.Fill(mu_calo_iso[m] / mu.Pt())
                
            for m1 in range(m):
                if mu_trk_iso: Muon_Track_polution_dR.Fill( mu.DeltaR(muon_t_vec[m1]), mu_trk_iso[m] / mu_trk[m1] )
                if mu_calo_iso: Muon_Topo_polution_dR.Fill( mu.DeltaR(muon_t_calo_vec[m1]), mu_calo_iso[m] / (mu_clu[m1] if mu_clu[m1]!= 0. else 1.) )
                    
            for e, el  in enumerate(elec_t_vec):
                if mu_trk_iso: Muon_Track_polution_dR.Fill( mu.DeltaR(el), mu_trk_iso[m] / el_trk[e]  )
                if mu_calo_iso: Muon_Topo_polution_dR.Fill( mu.DeltaR(elec_t_calo_vec[e]), mu_calo_iso[m] / el_clu[e] )
        
        ### Fill the muon histogram
        for e, el in enumerate(elec_t_vec):
            if el_trk_iso:
                Elec_Track_Iso.Fill(el_trk_iso[e] / 1.e3)
                Elec_RelTrack_Iso.Fill( el_trk_iso[e]/ el.Pt())
            for e1 in range(e):
                if el_trk_iso: Elec_Track_polution_dR.Fill( el.DeltaR(elec_t_vec[e1]), el_trk_iso[e] / el_trk[e1] )
                if el_calo_iso: Elec_Topo_polution_dR.Fill( el.DeltaR(elec_t_vec[e1]), el_calo_iso[e] / el_clu[e1] )
       
            for m, mu  in enumerate(muon_t_vec):
                if el_trk_iso: Elec_Track_polution_dR.Fill( mu.DeltaR(el), el_trk_iso[e] / mu_trk[m])
                if el_calo_iso: Elec_Topo_polution_dR.Fill( mu.DeltaR(muon_t_calo_vec[m]), el_calo_iso[e] / (mu_clu[m] if mu_clu[m]!= 0. else 1.))
                

    # do this here, since before it destroys the argparse
    ROOT.gROOT.Macro("rootlogon.C")
    ROOT.gROOT.SetStyle("ATLAS")
    ROOT.gROOT.SetBatch(1)
    ROOT.gStyle.SetPalette(ROOT.kViridis)
    if not os.path.exists(options.outDir):
        print "INFO: Create directory %s"%(options.outDir)
        os.system("mkdir -p %s"%(options.outDir))
   
    dummy_canvas = ROOT.TCanvas("dummy", "dummy", 800, 600)
    dummy_canvas.SaveAs("%s/AllIsolationPlots_%s.pdf["%(options.outDir, 
                                        "Corr" if options.useCorrectedCones else "Orig" ) )
                                        
    saved_once = False
    for H in AllHistos: saved_once = saveHisto(options, H) or saved_once
    
    if saved_once: dummy_canvas.SaveAs("%s/AllIsolationPlots_%s.pdf]"%(options.outDir, 
                                        "Corr" if options.useCorrectedCones else "Orig" ) )
    else: os.system("rm %s/AllIsolationPlots_%s.pdf"%(options.outDir, 
                                        "Corr" if options.useCorrectedCones else "Orig" ) )
   
