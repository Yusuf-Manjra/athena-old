/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

#include "AthViews/ViewHelper.h"

template < class CONTAINER >
StatusCode TrigBjetHypoAlgBase::retrieveCollectionFromView( const EventContext& context,
	   			  			      ElementLinkVector< CONTAINER >& EL,
				   			      const SG::ReadHandleKey< CONTAINER >& inputKey,
				   			      const TrigCompositeUtils::Decision* prevDecision ) const {

  ElementLink< ViewContainer > viewEL = prevDecision->objectLink< ViewContainer >( TrigCompositeUtils::viewString() );
  ATH_CHECK( viewEL.isValid() );
  ATH_MSG_DEBUG( "Retrieved View" );

  SG::ReadHandle< CONTAINER > Handle = ViewHelper::makeHandle( *viewEL, inputKey, context );
  ATH_CHECK( Handle.isValid() );
  ATH_MSG_DEBUG ( "EventView " << (*viewEL)->name() << " has object's container of size: " << Handle->size() );

  for ( unsigned int index(0); index < Handle->size(); index++ ) {
    ElementLink< CONTAINER > toAdd = ViewHelper::makeLink< CONTAINER >( *viewEL, Handle, index );
    ATH_CHECK( toAdd.isValid() );	
    EL.push_back( toAdd );
  }   
	
  return StatusCode::SUCCESS;
}

template < class CONTAINER >
StatusCode TrigBjetHypoAlgBase::retrieveObjectFromNavigation( const std::string& linkName,
	   							ElementLink< CONTAINER >& EL,
	   							const TrigCompositeUtils::Decision* prevDecision )  const {

    const std::vector< TrigCompositeUtils::LinkInfo< CONTAINER > > myObj = 
    	  TrigCompositeUtils::findLinks< CONTAINER >( prevDecision, linkName.c_str(), TrigDefs::lastFeatureOfType);

    if ( myObj.size() != 1 ) {
      ATH_MSG_ERROR( "Did not find only 1 object for link `" << linkName << "` stored in navigation!" );
      return StatusCode::FAILURE;
    }

    ATH_CHECK( myObj.at(0).isValid() );
    EL = myObj.at(0).link;	     
    
    return StatusCode::SUCCESS;
}

template < class CONTAINER >
StatusCode TrigBjetHypoAlgBase::retrieveCollectionFromNavigation( const std::string& linkName,
                                                    		    ElementLinkVector< CONTAINER >& objELs,
								    const TrigCompositeUtils::DecisionContainer* prevDecisionContainer )  const {

  for ( const TrigCompositeUtils::Decision *prevDecision : *prevDecisionContainer ) {
    ElementLink< CONTAINER > objEL;
    CHECK( retrieveObjectFromNavigation( linkName.c_str(), objEL, prevDecision ) );
    objELs.push_back( objEL ) ;
  }

  return StatusCode::SUCCESS;
}








template < class CONTAINER >
StatusCode TrigBjetHypoAlgBase::retrieveObjectFromStoreGate( const EventContext& context,
							       ElementLinkVector< CONTAINER >& ELs,
							       const SG::ReadHandleKey< CONTAINER >& inputKey ) const {
  
  ATH_MSG_DEBUG( "Retrieving object from StoreGate from " << inputKey.key() );

  SG::ReadHandle< CONTAINER  > ContainerHandle = SG::makeHandle( inputKey,context );
  CHECK( ContainerHandle.isValid() );
  const CONTAINER *Collection = ContainerHandle.get();

  for (const auto* obj : *Collection) {
    ElementLink< CONTAINER > Link = ElementLink< CONTAINER  >(*Collection, obj->index());
    ELs.push_back( Link );
  }

  return StatusCode::SUCCESS;
}

template < class CONTAINER >
StatusCode TrigBjetHypoAlgBase::retrieveObjectFromEventView( const EventContext& context,
                                                               ElementLinkVector< CONTAINER >& ELs,
                                                               const SG::ReadHandleKey< CONTAINER >& inputKey,
                                                               const TrigCompositeUtils::DecisionContainer* prevDevisionContainer ) const {

  ATH_MSG_DEBUG( "Retrieving object from Event View from " << inputKey.key() );

  // This vector is for checking we are not reading more than once from the same View, thus retrieving the same objects multiple times!
  std::vector< ElementLink< ViewContainer > > readViews;

  for ( const TrigCompositeUtils::Decision* previousDecision: *prevDevisionContainer ) {
    // get View
    ElementLink< ViewContainer > viewEL = previousDecision->objectLink< ViewContainer >( TrigCompositeUtils::viewString() );
    ATH_CHECK( viewEL.isValid() );
    ATH_MSG_DEBUG( "Retrieved View" );

    bool alreadyUsed = false;
    for ( const ElementLink< ViewContainer >& storedViews : readViews ) {
      if ( viewEL == storedViews ) {
        ATH_MSG_DEBUG( "We have already used this view!" );
	alreadyUsed = true;    
	break;
      } 
    }
    if ( alreadyUsed ) continue;

    readViews.push_back( viewEL );

    SG::ReadHandle< CONTAINER > Handle = ViewHelper::makeHandle( *viewEL, inputKey, context );
    ATH_CHECK( Handle.isValid() );
    ATH_MSG_DEBUG ( "EventView " << (*viewEL)->name() << " has object's container of size: " << Handle->size() );

    size_t Counter = 0;
    for ( auto it = Handle->begin(); it != Handle->end(); ++it, ++Counter ) {
      ElementLink< CONTAINER > EL = ViewHelper::makeLink< CONTAINER >( *viewEL, Handle, Counter );
      ATH_CHECK( EL.isValid() );
      ELs.push_back( EL );
    }
  }

  return StatusCode::SUCCESS;
}




template< class CONTAINER >
StatusCode TrigBjetHypoAlgBase::attachObjectLinkToDecisionFromStoreGate( TrigCompositeUtils::Decision& outputDecision,
                                                                           const SG::ReadHandleKey< CONTAINER >& objectKey,
                                                                           const std::string& objLink,
                                                                           int objIndex ) const {

  // Do the linking                                                                                                                                                                                           
  ATH_MSG_DEBUG( "Adding object with link name '" << objLink << "'" );
  outputDecision.setObjectLink( objLink,ElementLink< CONTAINER >( objectKey.key(),objIndex ) );

  return StatusCode::SUCCESS;
}

template< class CONTAINER >
StatusCode TrigBjetHypoAlgBase::attachObjectLinkToDecisionsFromStoreGate( std::vector< TrigCompositeUtils::Decision* >& outputDecisions,
									    const SG::ReadHandleKey< CONTAINER >& objectKey,
									    const std::string& objLink,
									    int forcedIndex ) const {
  
  for ( unsigned int index(0); index < outputDecisions.size(); index++ ) {

    int objIndex = index;
    // This is used for primary vertex (one single obj attached to every output decisions)
    if ( forcedIndex >= 0 )
      objIndex = forcedIndex;

    // Get the correct decisions  
    TrigCompositeUtils::Decision* outputDecision = outputDecisions.at( index );

    CHECK( attachObjectLinkToDecisionFromStoreGate( *outputDecision,
    	   					    objectKey,
						    objLink,
						    objIndex ) );
  }

  return StatusCode::SUCCESS;
}


template< class CONTAINER >
StatusCode TrigBjetHypoAlgBase::attachObjectLinkToDecisionFromEventView( const EventContext& context,
                                                                           TrigCompositeUtils::Decision& outputDecision,
                                                                           const SG::ReadHandleKey< CONTAINER >& objectKey,
                                                                           const std::string& objLink,
                                                                           int objIndex ) const {

  // Check navigation is set properly
  if ( not outputDecision.hasObjectCollectionLinks( TrigCompositeUtils::seedString() ) ) {
    ATH_MSG_ERROR( "Trying to add object link with handle key '" << objectKey.key() << "' to output decision with link name '" << objLink <<"'" );
    ATH_MSG_ERROR( "But output decision does not have link to seed collection!" );
    return StatusCode::FAILURE;
  }

  // Get parent decision
  const std::vector<ElementLink< TrigCompositeUtils::DecisionContainer >> mySeeds = outputDecision.objectCollectionLinks< TrigCompositeUtils::DecisionContainer >( TrigCompositeUtils::seedString() );
  const TrigCompositeUtils::Decision inputDecision = **mySeeds.back();

  // Get object link from view, taken from the input decision
  ElementLink< ViewContainer > viewEL = inputDecision.objectLink< ViewContainer >( TrigCompositeUtils::viewString() );
  ATH_CHECK( viewEL.isValid() );

  SG::ReadHandle< CONTAINER > calObjectHandle = ViewHelper::makeHandle( *viewEL, objectKey, context );
  ATH_CHECK( calObjectHandle.isValid() );

  ElementLink< CONTAINER > objEL = ViewHelper::makeLink( *viewEL, calObjectHandle, objIndex );
  ATH_CHECK( objEL.isValid() );

  // Do the linking
  ATH_MSG_DEBUG( "Adding object with link name '" << objLink << "'" );
  outputDecision.setObjectLink( objLink,objEL );

  return StatusCode::SUCCESS;
}

template< class CONTAINER >
StatusCode TrigBjetHypoAlgBase::attachObjectLinkToDecisionsFromEventView( const EventContext& context,
									    std::vector< TrigCompositeUtils::Decision* >& outputDecisions,
									    const SG::ReadHandleKey< CONTAINER >& objectKey,
									    const std::string& objLink,
									    int forcedIndex ) const {

  for ( unsigned int index(0); index<outputDecisions.size(); index++ ) {

    int objIndex = index;
    // This is used for primary vertex (one single obj attached to every output decisions)
    if ( forcedIndex >= 0 )
      objIndex = forcedIndex;

    // Get the correct decision
    TrigCompositeUtils::Decision* outputDecision = outputDecisions.at( index );

    CHECK( attachObjectLinkToDecisionFromEventView( context,
    	   					    *outputDecision,
						    objectKey,	
						    objLink,
						    objIndex  ) );
  }   

  return StatusCode::SUCCESS;
}

template < class CONTAINER >
StatusCode TrigBjetHypoAlgBase::attachObjectCollectionLinkToDecisionsFromEventView( const EventContext& context,
										      std::vector< TrigCompositeUtils::Decision* >& outputDecisions,
										      const SG::ReadHandleKey< CONTAINER >& objectKey,
										      const std::string& objLink ) const {

  for ( TrigCompositeUtils::Decision* outputDecision : outputDecisions ) {

    // Check navigation is set properly
    if ( not outputDecision->hasObjectCollectionLinks( TrigCompositeUtils::seedString() ) ) {
      ATH_MSG_ERROR( "Trying to add object collection link with handle key '" << objectKey.key() << "' to output decision with link name '" << objLink <<"'" );
      ATH_MSG_ERROR( "But output decision does not have link to seed collection!" );
      return StatusCode::FAILURE;
    } 

    // Get corresponding input decision
    const std::vector<ElementLink< TrigCompositeUtils::DecisionContainer >> mySeeds = outputDecision->objectCollectionLinks< TrigCompositeUtils::DecisionContainer >( TrigCompositeUtils::seedString() );
    const TrigCompositeUtils::Decision* inputDecision = *mySeeds.back();

    // Get object link from view, taken from the input decision 
    ElementLink< ViewContainer > viewEL = inputDecision->objectLink< ViewContainer >( TrigCompositeUtils::viewString() );
    ATH_CHECK( viewEL.isValid() );

    SG::ReadHandle< CONTAINER > calObjectHandle = ViewHelper::makeHandle( *viewEL,objectKey,context );
    ATH_CHECK( calObjectHandle.isValid() );

    // Create Collection to be linked
    std::vector<ElementLink< CONTAINER >> objELs;
    for ( unsigned int i(0); i<calObjectHandle->size(); i++ ) {
      ElementLink< CONTAINER > objEL = ViewHelper::makeLink( *viewEL, calObjectHandle, i );
      ATH_CHECK( objEL.isValid() );
      objELs.push_back( objEL );
    }

    // Do the linking
    ATH_MSG_DEBUG( "Adding object collection with link name '" << objLink << "' and size " << objELs.size() );
    outputDecision->addObjectCollectionLinks( objLink,objELs );
  }

  return StatusCode::SUCCESS;
}




