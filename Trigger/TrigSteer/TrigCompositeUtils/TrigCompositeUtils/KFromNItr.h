/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

#ifndef TRIGCOMPOSITEUTILS_KFROMNITR_H
#define TRIGCOMPOSITEUTILS_KFROMNITR_H

#include <iterator>
#include <vector>

namespace TrigCompositeUtils {
  /**
  * @brief Iterates over all combinations of k values chosen from a range n
  * 
  * Generates all distinct combinations of k distinct values less than N.
  * 
  * This is an input iterator as it's impossible to satisfy the multi-pass
  * guarantee in the forward iterator category where the return value is
  * generated on the fly.
  * However, this still follows the forward iterator convention that all
  * past-the-end iterators compare equal, and that a default constructed
  * iterator counts as a past-the-end iterator.
  * 
  * Combinations are generated in ascending order, with the indices in
  * ascending order. The highest index is always incremented first if possible.
  * Therefore the combinations generated by an iterator constructed as
  * KFromNItr(3, 4);
  * would be
  * (0, 1, 2)
  * (0, 1, 3)
  * (0, 2, 3)
  * (1, 2, 3)
  */
  class KFromNItr
  {
  public:
    /// Iterator traits
    using iterator_category = std::input_iterator_tag;
    using value_type = std::vector<std::size_t>;
    using reference = const value_type &;
    using pointer = const value_type *;
    using difference_type = std::ptrdiff_t;

    /// Default constructor creates a generic past-the-end iterator
    KFromNItr() = default;

    /// Construct the iterator choosing k from N
    KFromNItr(std::size_t k, std::size_t N);

    /// The size of each combination (k)
    std::size_t size() const { return m_current.size(); }

    /// Reset the iterator to its start position
    void reset();

    /// True if this iterator is past the end
    bool exhausted() const;

    /// Dereference
    reference operator*() const;
    pointer operator->() const;

    /// Pre-increment operator
    KFromNItr &operator++();

    /// Post-increment operator
    KFromNItr operator++(int);

    /// Iterator comparison functions
    bool operator==(const KFromNItr &other) const;
    bool operator!=(const KFromNItr &other) const;

  private:
    /// The number of indices
    std::size_t m_N{0};
    /// The current combination
    std::vector<std::size_t> m_current;
  }; //> end class KFromNItr
} //> end namespace TrigCompositeUtils

#endif //> !TRIGCOMPOSITEUTILS_KFROMNITR_H