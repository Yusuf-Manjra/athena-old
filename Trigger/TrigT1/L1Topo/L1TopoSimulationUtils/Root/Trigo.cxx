/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/
/*********************************
 * Trigo.cxx
 * author : Ignacio Aracena <ignacio.aracena@cern.ch>
 * Created June 2015
 *
 * @brief Lookup table for trigonometric functions.
 *        Resolution is in PI/32. Values is in Qm.n format 
 *        with the MSB reserved for sign, and m=1, n = 7
 *
 **********************************/

#include "L1TopoSimulationUtils/Trigo.h"
#include <cmath>

const std::vector<std::string> TSU::Trigo::Cosleg=
  {
   //legacy
   "010000000",  // 1.0
   "001111111",  // 0.9951847266721969
   "001111110",  // 0.9807852804032304
   "001111010",  // 0.9569403357322088
   "001110110",  // 0.9238795325112867
   "001110001",  // 0.881921264348355  // 5
   "001101010",  // 0.8314696123025452
   "001100011",  // 0.773010453362737
   "001011011",  // 0.7071067811865476
   "001010001",  // 0.6343932841636455
   "001000111",  // 0.5555702330196023 // 10
   "000111100",  // 0.4713967368259978
   "000110001",  // 0.38268343236508984
   "000100101",  // 0.29028467725446233
   "000011001",  // 0.19509032201612833
   "000001101",  // 0.09801714032956077 // 15 
   "000000000",  // 6.123233995736766e-17
   "111110011",  // -0.09801714032956065
   "111100111",  // -0.1950903220161282
   "111011011",  // -0.29028467725446216
   "111001111",  // -0.3826834323650897 // 20
   "111000100",  // -0.4713967368259977
   "110111001",  // -0.555570233019602
   "110101111",  // -0.6343932841636454
   "110100101",  // -0.7071067811865475
   "110011101",  // -0.773010453362737  // 25
   "110010110",  // -0.8314696123025453
   "110001111",  // -0.8819212643483549
   "110001010",  // -0.9238795325112867
   "110000110",  // -0.9569403357322088
   "110000010",  // -0.9807852804032304 // 30 
   "110000001",  // -0.9951847266721968
   "110000000",  // -1.0
   "110000001",  // -0.9951847266721969
   "110000010",  // -0.9807852804032304
   "110000110",  // -0.9569403357322089 // 35
   "110001010",  // -0.9238795325112868
   "110001111",  // -0.881921264348355
   "110010110",  // -0.8314696123025455
   "110011101",  // -0.7730104533627371
   "110100101",  // -0.7071067811865477 // 40
   "110101111",  // -0.6343932841636459
   "110111001",  // -0.5555702330196022
   "111000100",  // -0.47139673682599786
   "111001111",  // -0.38268343236509034
   "111011011",  // -0.29028467725446244 // 45
   "111100111",  // -0.19509032201612866
   "111110011",  // -0.09801714032956045
   "000000000",  // -1.8369701987210297e-16
   "000001101",  // 0.09801714032956009
   "000011001",  // 0.1950903220161283
   "000100101",  // 0.29028467725446205
   "000110001",  // 0.38268343236509
   "000111100",  // 0.4713967368259976
   "001000111",  // 0.5555702330196018
   "001010001",  // 0.6343932841636456
   "001011011",  // 0.7071067811865474
   "001100011",  // 0.7730104533627367
   "001101010",  // 0.8314696123025452
   "001110001",  // 0.8819212643483548
   "001110110",  // 0.9238795325112865
   "001111010",  // 0.9569403357322088
   "001111110",  // 0.9807852804032303
   "001111111"  // 0.9951847266721969
  };

//phase1
const std::vector<std::string> TSU::Trigo::Cos=
  {
   "010000000000",	 // value = 1.0(1.0)		 argument value = 0.0
   "001111111111",	 // value = 0.9987954562051724(0.9990234375)		 argument value = 0.04908738521234052
   "001111111011",	 // value = 0.9951847266721969(0.9951171875)		 argument value = 0.09817477042468103
   "001111110101",	 // value = 0.989176509964781(0.9892578125)		 argument value = 0.14726215563702155
   "001111101100",	 // value = 0.9807852804032304(0.98046875)		 argument value = 0.19634954084936207
   "001111100001",	 // value = 0.970031253194544(0.9697265625)		 argument value = 0.2454369260617026
   "001111010100",	 // value = 0.9569403357322088(0.95703125)		 argument value = 0.2945243112740431
   "001111000100",	 // value = 0.9415440651830208(0.94140625)		 argument value = 0.3436116964863836
   "001110110010",	 // value = 0.9238795325112867(0.923828125)		 argument value = 0.39269908169872414
   "001110011110",	 // value = 0.9039892931234433(0.904296875)		 argument value = 0.44178646691106466
   "001110000111",	 // value = 0.881921264348355(0.8818359375)		 argument value = 0.4908738521234052
   "001101101110",	 // value = 0.8577286100002721(0.857421875)		 argument value = 0.5399612373357456
   "001101010011",	 // value = 0.8314696123025452(0.8310546875)		 argument value = 0.5890486225480862
   "001100110110",	 // value = 0.8032075314806449(0.802734375)		 argument value = 0.6381360077604268
   "001100011000",	 // value = 0.773010453362737(0.7734375)		 argument value = 0.6872233929727672
   "001011110111",	 // value = 0.7409511253549591(0.7412109375)		 argument value = 0.7363107781851077
   "001011010100",	 // value = 0.7071067811865476(0.70703125)		 argument value = 0.7853981633974483
   "001010110000",	 // value = 0.6715589548470183(0.671875)		 argument value = 0.8344855486097889
   "001010001010",	 // value = 0.6343932841636455(0.634765625)		 argument value = 0.8835729338221293
   "001001100010",	 // value = 0.5956993044924335(0.595703125)		 argument value = 0.9326603190344698
   "001000111001",	 // value = 0.5555702330196023(0.5556640625)		 argument value = 0.9817477042468103
   "001000001110",	 // value = 0.5141027441932217(0.513671875)		 argument value = 1.030835089459151
   "000111100011",	 // value = 0.4713967368259978(0.4716796875)		 argument value = 1.0799224746714913
   "000110110110",	 // value = 0.4275550934302822(0.427734375)		 argument value = 1.1290098598838318
   "000110001000",	 // value = 0.38268343236508984(0.3828125)		 argument value = 1.1780972450961724
   "000101011001",	 // value = 0.33688985339222005(0.3369140625)		 argument value = 1.227184630308513
   "000100101001",	 // value = 0.29028467725446233(0.2900390625)		 argument value = 1.2762720155208536
   "000011111001",	 // value = 0.24298017990326398(0.2431640625)		 argument value = 1.325359400733194
   "000011001000",	 // value = 0.19509032201612833(0.1953125)		 argument value = 1.3744467859455345
   "000010010110",	 // value = 0.14673047445536175(0.146484375)		 argument value = 1.423534171157875
   "000001100100",	 // value = 0.09801714032956077(0.09765625)		 argument value = 1.4726215563702154
   "000000110010",	 // value = 0.049067674327418126(0.048828125)		 argument value = 1.521708941582556
   "000000000000",	 // value = 6.123233995736766e-17(0.0)		 argument value = 1.5707963267948966
   "111111001110",	 // value = -0.04906767432741801(-0.048828125)		 argument value = 1.6198837120072371
   "111110011100",	 // value = -0.09801714032956065(-0.09765625)		 argument value = 1.6689710972195777
   "111101101010",	 // value = -0.14673047445536164(-0.146484375)		 argument value = 1.718058482431918
   "111100111000",	 // value = -0.1950903220161282(-0.1953125)		 argument value = 1.7671458676442586
   "111100000111",	 // value = -0.24298017990326387(-0.2431640625)		 argument value = 1.8162332528565992
   "111011010111",	 // value = -0.29028467725446216(-0.2900390625)		 argument value = 1.8653206380689396
   "111010100111",	 // value = -0.33688985339221994(-0.3369140625)		 argument value = 1.9144080232812801
   "111001111000",	 // value = -0.3826834323650897(-0.3828125)		 argument value = 1.9634954084936207
   "111001001010",	 // value = -0.42755509343028186(-0.427734375)		 argument value = 2.012582793705961
   "111000011101",	 // value = -0.4713967368259977(-0.4716796875)		 argument value = 2.061670178918302
   "110111110010",	 // value = -0.5141027441932217(-0.513671875)		 argument value = 2.110757564130642
   "110111000111",	 // value = -0.555570233019602(-0.5556640625)		 argument value = 2.1598449493429825
   "110110011110",	 // value = -0.5956993044924334(-0.595703125)		 argument value = 2.2089323345553233
   "110101110110",	 // value = -0.6343932841636454(-0.634765625)		 argument value = 2.2580197197676637
   "110101010000",	 // value = -0.6715589548470184(-0.671875)		 argument value = 2.3071071049800045
   "110100101100",	 // value = -0.7071067811865475(-0.70703125)		 argument value = 2.356194490192345
   "110100001001",	 // value = -0.7409511253549589(-0.7412109375)		 argument value = 2.405281875404685
   "110011101000",	 // value = -0.773010453362737(-0.7734375)		 argument value = 2.454369260617026
   "110011001010",	 // value = -0.8032075314806448(-0.802734375)		 argument value = 2.5034566458293663
   "110010101101",	 // value = -0.8314696123025453(-0.8310546875)		 argument value = 2.552544031041707
   "110010010010",	 // value = -0.857728610000272(-0.857421875)		 argument value = 2.6016314162540475
   "110001111001",	 // value = -0.8819212643483549(-0.8818359375)		 argument value = 2.650718801466388
   "110001100010",	 // value = -0.9039892931234433(-0.904296875)		 argument value = 2.6998061866787286
   "110001001110",	 // value = -0.9238795325112867(-0.923828125)		 argument value = 2.748893571891069
   "110000111100",	 // value = -0.9415440651830207(-0.94140625)		 argument value = 2.7979809571034093
   "110000101100",	 // value = -0.9569403357322088(-0.95703125)		 argument value = 2.84706834231575
   "110000011111",	 // value = -0.970031253194544(-0.9697265625)		 argument value = 2.8961557275280905
   "110000010100",	 // value = -0.9807852804032304(-0.98046875)		 argument value = 2.945243112740431
   "110000001011",	 // value = -0.989176509964781(-0.9892578125)		 argument value = 2.9943304979527716
   "110000000101",	 // value = -0.9951847266721968(-0.9951171875)		 argument value = 3.043417883165112
   "110000000001",	 // value = -0.9987954562051724(-0.9990234375)		 argument value = 3.0925052683774528
   "110000000000",	 // value = -1.0(-1.0)		 argument value = 3.141592653589793
   "110000000001",	 // value = -0.9987954562051724(-0.9990234375)		 argument value = 3.1906800388021335
   "110000000101",	 // value = -0.9951847266721969(-0.9951171875)		 argument value = 3.2397674240144743
   "110000001011",	 // value = -0.989176509964781(-0.9892578125)		 argument value = 3.2888548092268146
   "110000010100",	 // value = -0.9807852804032304(-0.98046875)		 argument value = 3.3379421944391554
   "110000011111",	 // value = -0.970031253194544(-0.9697265625)		 argument value = 3.3870295796514958
   "110000101100",	 // value = -0.9569403357322089(-0.95703125)		 argument value = 3.436116964863836
   "110000111100",	 // value = -0.9415440651830208(-0.94140625)		 argument value = 3.485204350076177
   "110001001110",	 // value = -0.9238795325112868(-0.923828125)		 argument value = 3.5342917352885173
   "110001100010",	 // value = -0.9039892931234434(-0.904296875)		 argument value = 3.5833791205008576
   "110001111001",	 // value = -0.881921264348355(-0.8818359375)		 argument value = 3.6324665057131984
   "110010010010",	 // value = -0.8577286100002721(-0.857421875)		 argument value = 3.6815538909255388
   "110010101101",	 // value = -0.8314696123025455(-0.8310546875)		 argument value = 3.730641276137879
   "110011001010",	 // value = -0.8032075314806449(-0.802734375)		 argument value = 3.77972866135022
   "110011101000",	 // value = -0.7730104533627371(-0.7734375)		 argument value = 3.8288160465625602
   "110100001001",	 // value = -0.7409511253549591(-0.7412109375)		 argument value = 3.877903431774901
   "110100101100",	 // value = -0.7071067811865477(-0.70703125)		 argument value = 3.9269908169872414
   "110101010000",	 // value = -0.6715589548470187(-0.671875)		 argument value = 3.9760782021995817
   "110101110110",	 // value = -0.6343932841636459(-0.634765625)		 argument value = 4.025165587411922
   "110110011110",	 // value = -0.5956993044924331(-0.595703125)		 argument value = 4.074252972624263
   "110111000111",	 // value = -0.5555702330196022(-0.5556640625)		 argument value = 4.123340357836604
   "110111110010",	 // value = -0.5141027441932218(-0.513671875)		 argument value = 4.172427743048944
   "111000011101",	 // value = -0.47139673682599786(-0.4716796875)		 argument value = 4.221515128261284
   "111001001010",	 // value = -0.4275550934302825(-0.427734375)		 argument value = 4.270602513473625
   "111001111000",	 // value = -0.38268343236509034(-0.3828125)		 argument value = 4.319689898685965
   "111010100111",	 // value = -0.33688985339221994(-0.3369140625)		 argument value = 4.368777283898306
   "111011010111",	 // value = -0.29028467725446244(-0.2900390625)		 argument value = 4.417864669110647
   "111100000111",	 // value = -0.24298017990326412(-0.2431640625)		 argument value = 4.466952054322987
   "111100111000",	 // value = -0.19509032201612866(-0.1953125)		 argument value = 4.516039439535327
   "111101101010",	 // value = -0.1467304744553623(-0.146484375)		 argument value = 4.565126824747668
   "111110011100",	 // value = -0.09801714032956045(-0.09765625)		 argument value = 4.614214209960009
   "111111001110",	 // value = -0.04906767432741803(-0.048828125)		 argument value = 4.663301595172349
   "000000000000",	 // value = -1.8369701987210297e-16(0.0)		 argument value = 4.71238898038469
   "000000110010",	 // value = 0.04906767432741766(0.048828125)		 argument value = 4.76147636559703
   "000001100100",	 // value = 0.09801714032956009(0.09765625)		 argument value = 4.81056375080937
   "000010010110",	 // value = 0.14673047445536194(0.146484375)		 argument value = 4.859651136021712
   "000011001000",	 // value = 0.1950903220161283(0.1953125)		 argument value = 4.908738521234052
   "000011111001",	 // value = 0.24298017990326376(0.2431640625)		 argument value = 4.957825906446392
   "000100101001",	 // value = 0.29028467725446205(0.2900390625)		 argument value = 5.006913291658733
   "000101011001",	 // value = 0.3368898533922196(0.3369140625)		 argument value = 5.056000676871073
   "000110001000",	 // value = 0.38268343236509(0.3828125)		 argument value = 5.105088062083414
   "000110110110",	 // value = 0.42755509343028214(0.427734375)		 argument value = 5.154175447295755
   "000111100011",	 // value = 0.4713967368259976(0.4716796875)		 argument value = 5.203262832508095
   "001000001110",	 // value = 0.5141027441932216(0.513671875)		 argument value = 5.252350217720435
   "001000111001",	 // value = 0.5555702330196018(0.5556640625)		 argument value = 5.301437602932776
   "001001100010",	 // value = 0.5956993044924329(0.595703125)		 argument value = 5.350524988145116
   "001010001010",	 // value = 0.6343932841636456(0.634765625)		 argument value = 5.399612373357457
   "001010110000",	 // value = 0.6715589548470183(0.671875)		 argument value = 5.448699758569798
   "001011010100",	 // value = 0.7071067811865474(0.70703125)		 argument value = 5.497787143782138
   "001011110111",	 // value = 0.7409511253549589(0.7412109375)		 argument value = 5.546874528994478
   "001100011000",	 // value = 0.7730104533627367(0.7734375)		 argument value = 5.595961914206819
   "001100110110",	 // value = 0.803207531480645(0.802734375)		 argument value = 5.64504929941916
   "001101010011",	 // value = 0.8314696123025452(0.8310546875)		 argument value = 5.6941366846315
   "001101101110",	 // value = 0.857728610000272(0.857421875)		 argument value = 5.743224069843841
   "001110000111",	 // value = 0.8819212643483548(0.8818359375)		 argument value = 5.792311455056181
   "001110011110",	 // value = 0.9039892931234431(0.904296875)		 argument value = 5.841398840268521
   "001110110010",	 // value = 0.9238795325112865(0.923828125)		 argument value = 5.890486225480862
   "001111000100",	 // value = 0.9415440651830208(0.94140625)		 argument value = 5.939573610693203
   "001111010100",	 // value = 0.9569403357322088(0.95703125)		 argument value = 5.988660995905543
   "001111100001",	 // value = 0.970031253194544(0.9697265625)		 argument value = 6.037748381117884
   "001111101100",	 // value = 0.9807852804032303(0.98046875)		 argument value = 6.086835766330224
   "001111110101",	 // value = 0.9891765099647809(0.9892578125)		 argument value = 6.135923151542564
   "001111111011",	 // value = 0.9951847266721969(0.9951171875)		 argument value = 6.1850105367549055
   "001111111111" // value = 0.9987954562051724(0.9990234375)		 argument value = 6.234097921967246
  };


const std::vector<std::string> TSU::Trigo::Sinleg =
  {
   "000000000", // 0.0                 // 0
   "000001101", // 0.0980171403295606
   "000011001", // 0.19509032201612825
   "000100101", // 0.29028467725446233
   "000110001", // 0.3826834323650898
   "000111100", // 0.47139673682599764 // 5
   "001000111", // 0.5555702330196022
   "001010001", // 0.6343932841636455
   "001011011", // 0.7071067811865475
   "001100011", // 0.773010453362737
   "001101010", // 0.8314696123025452 // 10
   "001110001", // 0.8819212643483549
   "001110110", // 0.9238795325112867
   "001111010", // 0.9569403357322089
   "001111110", // 0.9807852804032304
   "001111111", // 0.9951847266721968 // 15
   "010000000", // 1.0
   "001111111", // 0.9951847266721969
   "001111110", // 0.9807852804032304
   "001111010", // 0.9569403357322089
   "001110110", // 0.9238795325112867 // 20
   "001110001", // 0.881921264348355
   "001101010", // 0.8314696123025455
   "001100011", // 0.7730104533627371
   "001011011", // 0.7071067811865476
   "001010001", // 0.6343932841636455 // 25
   "001000111", // 0.5555702330196022
   "000111100", // 0.47139673682599786
   "000110001", // 0.3826834323650899
   "000100101", // 0.2902846772544624
   "000011001", // 0.1950903220161286 // 30
   "000001101", // 0.09801714032956083
   "000000000", // 1.2246467991473532e-16
   "111110011", // -0.09801714032956059
   "111100111", // -0.19509032201612836
   "111011011", // -0.2902846772544621 // 35 
   "111001111", // -0.38268343236508967
   "111000100", // -0.47139673682599764
   "110111001", // -0.555570233019602
   "110101111", // -0.6343932841636453
   "110100101", // -0.7071067811865475 // 40
   "110011101", // -0.7730104533627367
   "110010110", // -0.8314696123025452
   "110001111", // -0.8819212643483549
   "110001010", // -0.9238795325112865
   "110000110", // -0.9569403357322088 // 45
   "110000010", // -0.9807852804032303
   "110000001", // -0.9951847266721969
   "110000000", // -1.0
   "110000001", // -0.9951847266721969
   "110000010", // -0.9807852804032304 // 50
   "110000110", // -0.9569403357322089
   "110001010", // -0.9238795325112866
   "110001111", // -0.881921264348355
   "110010110", // -0.8314696123025455
   "110011101", // -0.7730104533627369 // 55
   "110100101", // -0.7071067811865477
   "110101111", // -0.6343932841636459
   "110111001", // -0.5555702330196022
   "111000100", // -0.4713967368259979
   "111001111", // -0.3826834323650904 // 60
   "111011011", // -0.2902846772544625
   "111100111", // -0.19509032201612872
   "111110011" // -0.0980171403295605  // 63
  };

//phase1
const std::vector<std::string> TSU::Trigo::Sin=
  {
   "000000000000",	 // 0.0
   "000000110010",	 // 0.049067674327418015
   "000001100100",	 // 0.0980171403295606
   "000010010110",	 // 0.14673047445536175
   "000011001000",	 // 0.19509032201612825
   "000011111001",	 // 0.24298017990326387
   "000100101001",	 // 0.29028467725446233
   "000101011001",	 // 0.33688985339222005
   "000110001000",	 // 0.3826834323650898
   "000110110110",	 // 0.4275550934302821
   "000111100011",	 // 0.47139673682599764
   "001000001110",	 // 0.5141027441932217
   "001000111001",	 // 0.5555702330196022
   "001001100010",	 // 0.5956993044924334
   "001010001010",	 // 0.6343932841636455
   "001010110000",	 // 0.6715589548470183
   "001011010100",	 // 0.7071067811865475
   "001011110111",	 // 0.7409511253549591
   "001100011000",	 // 0.773010453362737
   "001100110110",	 // 0.8032075314806448
   "001101010011",	 // 0.8314696123025452
   "001101101110",	 // 0.8577286100002721
   "001110000111",	 // 0.8819212643483549
   "001110011110",	 // 0.9039892931234433
   "001110110010",	 // 0.9238795325112867
   "001111000100",	 // 0.9415440651830208
   "001111010100",	 // 0.9569403357322089
   "001111100001",	 // 0.970031253194544
   "001111101100",	 // 0.9807852804032304
   "001111110101",	 // 0.989176509964781
   "001111111011",	 // 0.9951847266721968
   "001111111111",	 // 0.9987954562051724
   "010000000000",	 // 1.0
   "001111111111",	 // 0.9987954562051724
   "001111111011",	 // 0.9951847266721969
   "001111110101",	 // 0.989176509964781
   "001111101100",	 // 0.9807852804032304
   "001111100001",	 // 0.970031253194544
   "001111010100",	 // 0.9569403357322089
   "001111000100",	 // 0.9415440651830208
   "001110110010",	 // 0.9238795325112867
   "001110011110",	 // 0.9039892931234434
   "001110000111",	 // 0.881921264348355
   "001101101110",	 // 0.8577286100002721
   "001101010011",	 // 0.8314696123025455
   "001100110110",	 // 0.8032075314806449
   "001100011000",	 // 0.7730104533627371
   "001011110111",	 // 0.740951125354959
   "001011010100",	 // 0.7071067811865476
   "001010110000",	 // 0.6715589548470186
   "001010001010",	 // 0.6343932841636455
   "001001100010",	 // 0.5956993044924335
   "001000111001",	 // 0.5555702330196022
   "001000001110",	 // 0.5141027441932218
   "000111100011",	 // 0.47139673682599786
   "000110110110",	 // 0.42755509343028203
   "000110001000",	 // 0.3826834323650899
   "000101011001",	 // 0.33688985339222033
   "000100101001",	 // 0.2902846772544624
   "000011111001",	 // 0.24298017990326407
   "000011001000",	 // 0.1950903220161286
   "000010010110",	 // 0.1467304744553618
   "000001100100",	 // 0.09801714032956083
   "000000110010",	 // 0.049067674327417966
   "000000000000",	 // 1.2246467991473532e-16
   "111111001110",	 // -0.049067674327417724
   "111110011100",	 // -0.09801714032956059
   "111101101010",	 // -0.14673047445536158
   "111100111000",	 // -0.19509032201612836
   "111100000111",	 // -0.24298017990326382
   "111011010111",	 // -0.2902846772544621
   "111010100111",	 // -0.3368898533922201
   "111001111000",	 // -0.38268343236508967
   "111001001010",	 // -0.4275550934302818
   "111000011101",	 // -0.47139673682599764
   "110111110010",	 // -0.5141027441932216
   "110111000111",	 // -0.555570233019602
   "110110011110",	 // -0.5956993044924332
   "110101110110",	 // -0.6343932841636453
   "110101010000",	 // -0.6715589548470184
   "110100101100",	 // -0.7071067811865475
   "110100001001",	 // -0.7409511253549589
   "110011101000",	 // -0.7730104533627367
   "110011001010",	 // -0.803207531480645
   "110010101101",	 // -0.8314696123025452
   "110010010010",	 // -0.857728610000272
   "110001111001",	 // -0.8819212643483549
   "110001100010",	 // -0.9039892931234431
   "110001001110",	 // -0.9238795325112865
   "110000111100",	 // -0.9415440651830208
   "110000101100",	 // -0.9569403357322088
   "110000011111",	 // -0.970031253194544
   "110000010100",	 // -0.9807852804032303
   "110000001011",	 // -0.9891765099647809
   "110000000101",	 // -0.9951847266721969
   "110000000001",	 // -0.9987954562051724
   "110000000000",	 // -1.0
   "110000000001",	 // -0.9987954562051724
   "110000000101",	 // -0.9951847266721969
   "110000001011",	 // -0.9891765099647809
   "110000010100",	 // -0.9807852804032304
   "110000011111",	 // -0.970031253194544
   "110000101100",	 // -0.9569403357322089
   "110000111100",	 // -0.9415440651830209
   "110001001110",	 // -0.9238795325112866
   "110001100010",	 // -0.9039892931234433
   "110001111001",	 // -0.881921264348355
   "110010010010",	 // -0.8577286100002722
   "110010101101",	 // -0.8314696123025455
   "110011001010",	 // -0.8032075314806453
   "110011101000",	 // -0.7730104533627369
   "110100001001",	 // -0.7409511253549591
   "110100101100",	 // -0.7071067811865477
   "110101010000",	 // -0.6715589548470187
   "110101110110",	 // -0.6343932841636459
   "110110011110",	 // -0.5956993044924332
   "110111000111",	 // -0.5555702330196022
   "110111110010",	 // -0.5141027441932219
   "111000011101",	 // -0.4713967368259979
   "111001001010",	 // -0.42755509343028253
   "111001111000",	 // -0.3826834323650904
   "111010100111",	 // -0.33688985339222
   "111011010111",	 // -0.2902846772544625
   "111100000111",	 // -0.24298017990326418
   "111100111000",	 // -0.19509032201612872
   "111101101010",	 // -0.1467304744553624
   "111110011100",	 // -0.0980171403295605
   "111111001110"          // -0.04906767432741809	
  };

int TSU::Trigo::atan2leg(TSU::L1TopoDataTypes<16,0> x, TSU::L1TopoDataTypes<16,0> y){
  short int octant=0;
  if((x.value()&(1<<16))&&(y.value()&(1<<16))){ // Ex and Ey negative
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 4; //100
    else octant = 5; // 101
  } else if(x.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 3; //011
    else octant = 2; // 010
  } else if(y.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 7; //111
    else octant = 6; // 110
  } else { // Ex and Ey both positive
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 0; //000
    else octant = 1; // 001
  }

  auto signed_x_f = x;
  auto signed_y_f = y;
  if(octant==0||octant==3||octant==4||octant==7){
    //signed_x_f = (abs(int(x)));
    signed_x_f = x.abs();
    signed_y_f = y.abs();
  } else {
    //signed_x_f = (abs(int(y)));
    signed_x_f = y.abs();
    signed_y_f = x.abs();
  }

  const std::vector<std::string> atan2_thresholds = {
						     "000010011101100",  //  1.260 (0.9)
						     "000011000010101", //  1.557 (1.0)
						     "000011110101100", //  1.964 (1.1)
						     "000101000001100", //  2.572 (1.2)
						     "000111000010010", //  3.602 (1.3)
						     "001011010100101", //  5.797 (1.4)
						     "011011100010101"}; // 14.101 (1.5)
  unsigned int flag = 0;
  for(size_t j=0;j<atan2_thresholds.size(); ++j){
    auto thresh =  TSU::L1TopoDataTypes<15,10>(atan2_thresholds.at(j));
    auto yy = signed_y_f*thresh;
    if(signed_x_f.to_float() > yy.to_float()) flag = (flag | (1<<j));
  }
  unsigned int octant_fine = 0;
  if(flag==0) octant_fine = 7;
  else if(flag==1) octant_fine = 6;
  else if(flag==3) octant_fine = 5;
  else if(flag==7) octant_fine = 4;
  else if(flag==15) octant_fine = 3;
  else if(flag==31) octant_fine = 2;
  else if(flag==63) octant_fine = 1;
  else if(flag==127) octant_fine = 0;

  unsigned int octant_fine2 = 0;
  if(flag==0) octant_fine2 = 0;
  else if(flag==1) octant_fine2 = 1;
  else if(flag==3) octant_fine2 = 2;
  else if(flag==7) octant_fine2 = 3;
  else if(flag==15) octant_fine2 = 4;
  else if(flag==31) octant_fine2 = 5;
  else if(flag==63) octant_fine2 = 6;
  else if(flag==127) octant_fine2 = 7;

  int intphi = octant << 3;
  if(octant==0||octant==2||octant==4||octant==6){
    intphi |= octant_fine;
  } else {
    intphi |= octant_fine2;
  }

  return intphi;
}

int TSU::Trigo::atan2(TSU::L1TopoDataTypes<16,0> x, TSU::L1TopoDataTypes<16,0> y){
  short int octant=0;
  if((x.value()&(1<<16))&&(y.value()&(1<<16))){ // Ex and Ey negative
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 4; //100
    else octant = 5; // 101
  } else if(x.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 3; //011
    else octant = 2; // 010
  } else if(y.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 7; //111
    else octant = 6; // 110
  } else { // Ex and Ey both positive
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 0; //000
    else octant = 1; // 001
  }

  auto signed_x_f = x;
  auto signed_y_f = y;
  if(octant==0||octant==3||octant==4||octant==7){
    //signed_x_f = (abs(int(x)));
    signed_x_f = x.abs();
    signed_y_f = y.abs();
  } else {
    //signed_x_f = (abs(int(y)));
    signed_x_f = y.abs();
    signed_y_f = x.abs();
  }
  
  // For phi in the first sector (0.8 < phi < 1.6) store the possible values of the tan
  const std::vector<std::string> atan2_thresholds =
    {
     "00000010010001101", // tan(0.85)=1.1383327132284393 rounded to 1.1376953125
     "00000010100001010", // tan(0.9)=1.2601582175503392 rounded to 1.259765625
     "00000010110010111", // tan(0.95)=1.398382589287699 rounded to 1.3974609375
     "00000011000111010", // tan(1.0)=1.5574077246549023 rounded to 1.556640625
     "00000011011111001", // tan(1.05)=1.7433153099831704 rounded to 1.7431640625
     "00000011111011011", // tan(1.1)=1.9647596572486523 rounded to 1.9638671875
     "00000100011110000", // tan(1.15)=2.2344969487553255 rounded to 2.234375
     "00000101001001001", // tan(1.2)=2.5721516221263188 rounded to 2.5712890625
     "00000110000001001", // tan(1.25)=3.0095696738628313 rounded to 3.0087890625
     "00000111001101000", // tan(1.3)=3.6021024479679786 rounded to 3.6015625
     "00001000111010010", // tan(1.35)=4.455221759562705 rounded to 4.455078125
     "00001011100110001", // tan(1.4)=5.797883715482887 rounded to 5.7978515625
     "00010000011110011", // tan(1.4500000000000002)=8.238092752965619 rounded to 8.2373046875
     "00011100001100111", // tan(1.5)=14.101419947171719 rounded to 14.1005859375
     "01100000001010000" // tan(1.55)=48.07848247921907 rounded to 48.078125
    };
  
  unsigned int flag = 0;
  for(size_t j=0;j<atan2_thresholds.size(); ++j){
    auto thresh =  TSU::L1TopoDataTypes<17,10>(atan2_thresholds.at(j));
    auto yy = signed_y_f*thresh;
    if(signed_x_f.to_float() > yy.to_float()) flag = (flag | (1<<j));
  }
  unsigned int octant_fine = 0;
  if(flag==0) octant_fine = 15;
  else if(flag==1) octant_fine = 14;
  else if(flag==3) octant_fine = 13;
  else if(flag==7) octant_fine = 12;
  else if(flag==15) octant_fine = 11;
  else if(flag==31) octant_fine = 10;
  else if(flag==63) octant_fine = 9;
  else if(flag==127) octant_fine = 8;
  else if(flag==255) octant_fine = 7;
  else if(flag==511) octant_fine = 6;
  else if(flag==1023) octant_fine = 5;
  else if(flag==2047) octant_fine = 4;
  else if(flag==3071) octant_fine = 3;
  else if(flag==5119) octant_fine = 2;
  else if(flag==9215) octant_fine = 1;
  else if(flag==17407) octant_fine = 0;

  unsigned int octant_fine2 = 0;
  if(flag==0) octant_fine2 = 0;
  else if(flag==1) octant_fine2 = 1;
  else if(flag==3) octant_fine2 = 2;
  else if(flag==7) octant_fine2 = 3;
  else if(flag==15) octant_fine2 = 4;
  else if(flag==31) octant_fine2 = 5;
  else if(flag==63) octant_fine2 = 6;
  else if(flag==127) octant_fine2 = 7;
  else if(flag==255) octant_fine2 = 8;
  else if(flag==511) octant_fine2 = 9;
  else if(flag==1023) octant_fine2 = 10;
  else if(flag==2047) octant_fine2 = 11;
  else if(flag==3071) octant_fine2 = 12;
  else if(flag==5119) octant_fine2 = 13;
  else if(flag==9215) octant_fine2 = 14;
  else if(flag==17407) octant_fine2 = 15;

  int intphi = octant << 3;
  if(octant==0||octant==2||octant==4||octant==6){
    intphi |= octant_fine;
  } else {
    intphi |= octant_fine2;
  }

  return intphi;
}
