// channelMappings/CaloDivision.h
// NB do not edit this file! It was created automatically
// by enumgen.pl on 09-Mar-2022 at 10:30:23.
// This class was generated using the list of enum values
// directly specified in the control file enumgen_direct.dat

#ifndef CALODIVISION_H
#define CALODIVISION_H

#include <iostream>
#include <string>
#include <vector>

class CaloDivision {
public:

  // Allowed enum values.
  enum CaloDivisionEnum {
    LArFCAL1C = 0,
    LArEMECC,
    LArOverlapC,
    LArEMBC,
    LArEMBA,
    LArOverlapA,
    LArEMECA,
    LArFCAL1A,
    LArFCAL23C,
    LArHECC,
    TileEBC,
    TileLBC,
    TileLBA,
    TileEBA,
    LArHECA,
    LArFCAL23A,
    Invalid
  };

  // Construction
  CaloDivision(const CaloDivisionEnum e) : m_enum(e) {}
  CaloDivision(const std::string& s) { this->setEnum(s); }
  CaloDivision(const CaloDivision& c) : m_enum(c.getEnum()) {};
  CaloDivision& operator=(const CaloDivisionEnum e) { m_enum = e; return *this; }
  CaloDivision& operator=(const std::string& s) { this->setEnum(s); return *this; }
  CaloDivision& operator=(const CaloDivision& c) { if (&c != this) { m_enum = c.getEnum(); } return *this; }
  virtual ~CaloDivision() {}

  // Information
  static unsigned int numValues() { return 17; }
  unsigned int getNumValues() const { return numValues(); }
  const std::vector<std::string> listEnums() const;
  const std::string className() const;
  const std::string toString() const;

  // Access to data member
  CaloDivisionEnum getEnum() const { return m_enum; }

  // Comparison
  bool operator==(const CaloDivisionEnum e) const { return this->getEnum() == e; }
  bool operator==(const CaloDivision& c) const { return this->getEnum() == c.getEnum(); }
  bool operator!=(const CaloDivisionEnum e) const { return !(*this == e); }
  bool operator!=(const CaloDivision& c) const { return !(*this == c); }
  bool operator<(const CaloDivision& c) const { return this->getEnum() < c.getEnum(); }

private:
  // Set data member from string
  void setEnum(const std::string& s);

  // Data members
  CaloDivisionEnum m_enum;
};

// Related global operators
std::ostream& operator<< (std::ostream& s, const CaloDivision& c);

#endif  // CALODIVISION_H
