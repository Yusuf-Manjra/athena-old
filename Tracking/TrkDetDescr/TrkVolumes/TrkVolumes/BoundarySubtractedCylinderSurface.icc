/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

///////////////////////////////////////////////////////////////////
// BoundarySubtractedCylinderSurface.icc, (c) ATLAS Detector software
///////////////////////////////////////////////////////////////////

template<class Tvol>
inline const Surface&
BoundarySubtractedCylinderSurface<Tvol>::surfaceRepresentation() const
{
  return *this;
}
template<class Tvol>
inline const Tvol*
BoundarySubtractedCylinderSurface<Tvol>::attachedVolume(
  const TrackParameters& parms,
  PropDirection dir) const
{
  const Tvol* attVolume = nullptr;
  // (ST) buggy line - assumes the parms are at this boundary surface !
  // const HepGeom::Vector3D<double>* localNormal =
  // this->surfaceRepresentation().normal(parms.localPosition()); replacing with
  auto locPos = this->surfaceRepresentation().globalToLocal(parms.position());
  Amg::Vector3D localNormal{};
  if (locPos) {
    localNormal = this->surfaceRepresentation().normal(*locPos);
  } else {
    return attVolume;
  }
  // (ST) end patch

  if (localNormal.dot(dir * parms.momentum()) > 0.) {
    attVolume = BoundarySurface<Tvol>::m_outsideVolume;
    if (BoundarySurface<Tvol>::m_outsideVolumeArray.get()) {
      attVolume = BoundarySurface<Tvol>::m_outsideVolumeArray.get()->object(
        parms.position());
    }
  } else {
    attVolume = BoundarySurface<Tvol>::m_insideVolume;
    if (BoundarySurface<Tvol>::m_insideVolumeArray.get()) {
      attVolume = BoundarySurface<Tvol>::m_insideVolumeArray.get()->object(
        parms.position());
    }
  }
  return attVolume;
}

template<class Tvol>
inline const Tvol*
BoundarySubtractedCylinderSurface<Tvol>::attachedVolume(
  const Amg::Vector3D& pos,
  const Amg::Vector3D& mom,
  PropDirection dir) const
{
  const Tvol* attVolume = nullptr;
  auto lp = Surface::globalToLocal(pos, 2.);
  if (lp) {
    const Amg::Vector3D localNormal = CylinderSurface::normal(*lp);
    if (localNormal.dot(dir * mom) > 0.) {
      attVolume = BoundarySurface<Tvol>::m_outsideVolume;
      if (BoundarySurface<Tvol>::m_outsideVolumeArray.get()) {
        attVolume =
          BoundarySurface<Tvol>::m_outsideVolumeArray.get()->object(pos);
      }
    } else {
      attVolume = BoundarySurface<Tvol>::m_insideVolume;
      if (BoundarySurface<Tvol>::m_insideVolumeArray.get()) {
        attVolume =
          BoundarySurface<Tvol>::m_insideVolumeArray.get()->object(pos);
      }
    }
  }
  return attVolume;
}

