/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

///////////////////////////////////////////////////////////////////
// BoundaryCylinderSurface.icc, (c) ATLAS Detector software
///////////////////////////////////////////////////////////////////

template<class Tvol>
inline const Surface&
BoundaryCylinderSurface<Tvol>::surfaceRepresentation() const
{
  return *this;
}
template<class Tvol>
inline const Tvol*
BoundaryCylinderSurface<Tvol>::attachedVolume(const TrackParameters& parms,
                                              PropDirection dir) const
{
  const Tvol* attVolume = nullptr;
  auto locPos = this->surfaceRepresentation().globalToLocal(parms.position());
  Amg::Vector3D localNormal{};
  if (locPos) {
    localNormal = this->surfaceRepresentation().normal(*locPos);
  } else {
    return attVolume;
  }

  if (localNormal.dot(dir * parms.momentum()) > 0.) {
    attVolume = BoundarySurface<Tvol>::m_outsideVolume;
    if (BoundarySurface<Tvol>::m_outsideVolumeArray.get()) {
      attVolume = BoundarySurface<Tvol>::m_outsideVolumeArray.get()->object(
        parms.position());
    }
  } else {
    attVolume = BoundarySurface<Tvol>::m_insideVolume;
    if (BoundarySurface<Tvol>::m_insideVolumeArray.get()) {
      attVolume = BoundarySurface<Tvol>::m_insideVolumeArray.get()->object(
        parms.position());
    }
  }
  return attVolume;
}

template<class Tvol>
inline const Tvol*
BoundaryCylinderSurface<Tvol>::attachedVolume(const Amg::Vector3D& pos,
                                              const Amg::Vector3D& mom,
                                              PropDirection dir) const
{
  const Tvol* attVolume = nullptr;
  // const Amg::Vector2D* lp =
  // CylinderSurface::globalToLocal(pos, 2.*Gaudi::Units::mm);
  Amg::Vector2D lp{};
  // The new interface returns true or false , based on internal tolerance
  // there is not nullptr to check.
  const bool intol = CylinderSurface::globalToLocal(pos, pos, lp);

  if (intol) {
    Amg::Vector3D localNormal = CylinderSurface::normal(lp);
    if (localNormal.dot(dir * mom) > 0.) {
      attVolume = BoundarySurface<Tvol>::m_outsideVolume;
      if (BoundarySurface<Tvol>::m_outsideVolumeArray.get()) {
        attVolume =
          BoundarySurface<Tvol>::m_outsideVolumeArray.get()->object(pos);
      }
    } else {
      attVolume = BoundarySurface<Tvol>::m_insideVolume;
      if (BoundarySurface<Tvol>::m_insideVolumeArray.get()) {
        attVolume =
          BoundarySurface<Tvol>::m_insideVolumeArray.get()->object(pos);
      }
    }
  }

  return attVolume;
}

