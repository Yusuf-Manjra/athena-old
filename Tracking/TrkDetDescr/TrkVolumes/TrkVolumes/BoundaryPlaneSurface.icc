/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

///////////////////////////////////////////////////////////////////
// BoundaryPlaneSurface.icc, (c) ATLAS Detector software
///////////////////////////////////////////////////////////////////

template<class Tvol>
inline const Surface&
BoundaryPlaneSurface<Tvol>::surfaceRepresentation() const
{
  return *this;
}
template<class Tvol>
inline const Tvol*
BoundaryPlaneSurface<Tvol>::attachedVolume(const TrackParameters& parms,
                                           PropDirection dir) const
{
  const Tvol* attVolume = nullptr;
  if ((this->surfaceRepresentation().normal()).dot(dir * parms.momentum()) >
      0.) {
    attVolume = BoundarySurface<Tvol>::m_outsideVolume;
    if (BoundarySurface<Tvol>::m_outsideVolumeArray.get()) {
      attVolume = BoundarySurface<Tvol>::m_outsideVolumeArray.get()->object(
        parms.localPosition());
    }
  } else {
    attVolume = BoundarySurface<Tvol>::m_insideVolume;
    if (BoundarySurface<Tvol>::m_insideVolumeArray.get()) {
      attVolume = BoundarySurface<Tvol>::m_insideVolumeArray.get()->object(
        parms.localPosition());
    }
  }
  return attVolume;
}

template<class Tvol>
inline const Tvol*
BoundaryPlaneSurface<Tvol>::attachedVolume(const Amg::Vector3D& pos,
                                           const Amg::Vector3D& mom,
                                           PropDirection dir) const
{
  const Tvol* attVolume = nullptr;
  if ((this->surfaceRepresentation().normal()).dot(dir * mom) > 0.) {
    attVolume = BoundarySurface<Tvol>::m_outsideVolume;
    if (BoundarySurface<Tvol>::m_outsideVolumeArray.get()) {
      attVolume =
        BoundarySurface<Tvol>::m_outsideVolumeArray.get()->object(pos);
    }
  } else {
    attVolume = BoundarySurface<Tvol>::m_insideVolume;
    if (BoundarySurface<Tvol>::m_insideVolumeArray.get()) {
      attVolume = BoundarySurface<Tvol>::m_insideVolumeArray.get()->object(pos);
    }
  }
  return attVolume;
}

