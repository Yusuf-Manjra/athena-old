namespace Trk {

inline RotatedDiamondBounds*
RotatedDiamondBounds::clone() const
{
  return new RotatedDiamondBounds(*this);
}

inline double
RotatedDiamondBounds::minHalflengthX() const
{
  return m_boundValues[RotatedDiamondBounds::bv_minHalfX];
}

inline double
RotatedDiamondBounds::medHalflengthX() const
{
  return m_boundValues[RotatedDiamondBounds::bv_medHalfX];
}

inline double
RotatedDiamondBounds::maxHalflengthX() const
{
  return m_boundValues[RotatedDiamondBounds::bv_maxHalfX];
}

inline double
RotatedDiamondBounds::halflengthY1() const
{
  return m_boundValues[RotatedDiamondBounds::bv_halfY1];
}

inline double
RotatedDiamondBounds::halflengthY2() const
{
  return m_boundValues[RotatedDiamondBounds::bv_halfY2];
}

inline double
RotatedDiamondBounds::r() const
{
  return sqrt(m_boundValues[RotatedDiamondBounds::bv_medHalfX] *
                m_boundValues[RotatedDiamondBounds::bv_medHalfX] +
              m_boundValues[RotatedDiamondBounds::bv_halfY1] *
                m_boundValues[RotatedDiamondBounds::bv_halfY1]);
}

inline bool
RotatedDiamondBounds::inside(const Amg::Vector2D& locpo,
                             const BoundaryCheck& bchk) const
{
  // locX and locY are interchanged wrt DiamondBounds
  if (bchk.bcType == 0)
    return RotatedDiamondBounds::inside(
      locpo, bchk.toleranceLoc1, bchk.toleranceLoc2);
  // a fast FALSE
  double max_ell = bchk.lCovariance(0, 0) > bchk.lCovariance(1, 1)
                     ? bchk.lCovariance(0, 0)
                     : bchk.lCovariance(1, 1);
  double limit = bchk.nSigmas * sqrt(max_ell);
  if (locpo[Trk::locX] <
      -2 * m_boundValues[RotatedDiamondBounds::bv_halfY1] - limit)
    return false;
  if (locpo[Trk::locX] >
      2 * m_boundValues[RotatedDiamondBounds::bv_halfY2] + limit)
    return false;
  // a fast FALSE
  double fabsX = fabs(locpo[Trk::locY]);
  if (fabsX > (m_boundValues[RotatedDiamondBounds::bv_medHalfX] + limit))
    return false;
  // a fast TRUE
  double min_ell = bchk.lCovariance(0, 0) < bchk.lCovariance(1, 1)
                     ? bchk.lCovariance(0, 0)
                     : bchk.lCovariance(1, 1);
  limit = bchk.nSigmas * sqrt(min_ell);
  if (fabsX < (fmin(m_boundValues[RotatedDiamondBounds::bv_minHalfX],
                    m_boundValues[RotatedDiamondBounds::bv_maxHalfX]) -
               limit))
    return true;
  // a fast TRUE
  if (fabs(locpo[Trk::locX]) <
      (fmin(m_boundValues[RotatedDiamondBounds::bv_halfY1],
            m_boundValues[RotatedDiamondBounds::bv_halfY2]) -
       limit))
    return true;

  // compute KDOP and axes for surface polygon
  std::vector<KDOP> elementKDOP(5);
  std::vector<Amg::Vector2D> elementP(6);
  float theta =
    (bchk.lCovariance(1, 0) != 0 &&
     (bchk.lCovariance(1, 1) - bchk.lCovariance(0, 0)) != 0)
      ? .5 * bchk.FastArcTan(2 * bchk.lCovariance(1, 0) /
                             (bchk.lCovariance(1, 1) - bchk.lCovariance(0, 0)))
      : 0.;
  sincosCache scResult = bchk.FastSinCos(theta);
  AmgMatrix(2, 2) rotMatrix;
  rotMatrix << scResult.cosC, scResult.sinC, -scResult.sinC, scResult.cosC;
  AmgMatrix(2, 2) normal;
  // cppcheck-suppress constStatement
  normal << 0, -1, 1, 0;
  // ellipse is always at (0,0), surface is moved to ellipse position and then
  // rotated exchange locX and locY
  Amg::Vector2D locpoF;
  locpoF[0] = locpo[Trk::locY];
  locpoF[1] = locpo[Trk::locX];
  Amg::Vector2D p;
  p = Amg::Vector2D (-m_boundValues[RotatedDiamondBounds::bv_minHalfX],
                     -2. * m_boundValues[RotatedDiamondBounds::bv_halfY1]);
  elementP[0] = (rotMatrix * (p - locpoF));
  p = Amg::Vector2D (-m_boundValues[RotatedDiamondBounds::bv_medHalfX], 0.);
  elementP[1] = (rotMatrix * (p - locpoF));
  p = Amg::Vector2D (-m_boundValues[RotatedDiamondBounds::bv_maxHalfX],
                     2. * m_boundValues[RotatedDiamondBounds::bv_halfY2]);
  elementP[2] = (rotMatrix * (p - locpoF));
  p = Amg::Vector2D (m_boundValues[RotatedDiamondBounds::bv_maxHalfX],
                     2. * m_boundValues[RotatedDiamondBounds::bv_halfY2]);
  elementP[3] = (rotMatrix * (p - locpoF));
  p = Amg::Vector2D (m_boundValues[RotatedDiamondBounds::bv_medHalfX], 0.);
  elementP[4] = (rotMatrix * (p - locpoF));
  p = Amg::Vector2D (m_boundValues[RotatedDiamondBounds::bv_minHalfX],
                     -2. * m_boundValues[RotatedDiamondBounds::bv_halfY1]);
  elementP[5] = (rotMatrix * (p - locpoF));
  std::vector<Amg::Vector2D> axis = { normal * (elementP[1] - elementP[0]),
                                      normal * (elementP[2] - elementP[1]),
                                      normal * (elementP[3] - elementP[2]),
                                      normal * (elementP[4] - elementP[3]),
                                      normal * (elementP[5] - elementP[4]) };
  bchk.ComputeKDOP(elementP, axis, elementKDOP);
  // compute KDOP for error ellipse
  std::vector<KDOP> errelipseKDOP(5);
  bchk.ComputeKDOP(bchk.EllipseToPoly(3), axis, errelipseKDOP);
  // check if KDOPs overlap and return result
  return bchk.TestKDOPKDOP(elementKDOP, errelipseKDOP);
}

inline bool
RotatedDiamondBounds::insideLoc1(const Amg::Vector2D& locpo, double tol1) const
{
  return (fabs(locpo[locY]) <
          m_boundValues[RotatedDiamondBounds::bv_medHalfX] + tol1);
}

inline bool
RotatedDiamondBounds::insideLoc2(const Amg::Vector2D& locpo, double tol2) const
{
  return (
    (locpo[locX] >
     -2. * m_boundValues[RotatedDiamondBounds::bv_halfY1] - tol2) &&
    (locpo[locY] < 2. * m_boundValues[RotatedDiamondBounds::bv_halfY2] + tol2));
}

inline void
RotatedDiamondBounds::initCache()
{
  m_alpha1 = atan2(m_boundValues[RotatedDiamondBounds::bv_medHalfX] -
                     m_boundValues[RotatedDiamondBounds::bv_minHalfX],
                   2. * m_boundValues[RotatedDiamondBounds::bv_halfY1]);
  m_alpha2 = atan2(m_boundValues[RotatedDiamondBounds::bv_medHalfX] -
                     m_boundValues[RotatedDiamondBounds::bv_maxHalfX],
                   2. * m_boundValues[RotatedDiamondBounds::bv_halfY2]);
}

} // end of namespace
