/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {

inline TrapezoidBounds*
TrapezoidBounds::clone() const
{
  return new TrapezoidBounds(*this);
}

inline double
TrapezoidBounds::minHalflengthX() const
{
  return m_boundValues[TrapezoidBounds::bv_minHalfX];
}

inline double
TrapezoidBounds::maxHalflengthX() const
{
  return m_boundValues[TrapezoidBounds::bv_maxHalfX];
}

inline double
TrapezoidBounds::halflengthY() const
{
  return m_boundValues[TrapezoidBounds::bv_halfY];
}

inline double
TrapezoidBounds::minHalflengthPhi() const
{
  return minHalflengthX();
}

inline double
TrapezoidBounds::maxHalflengthPhi() const
{
  return maxHalflengthX();
}

inline double
TrapezoidBounds::halflengthEta() const
{
  return halflengthY();
}

inline double
TrapezoidBounds::alpha() const
{
  return m_alpha;
}

inline double
TrapezoidBounds::beta() const
{
  return m_beta;
}

inline double
TrapezoidBounds::r() const
{
  return sqrt(m_boundValues[TrapezoidBounds::bv_maxHalfX] *
                m_boundValues[TrapezoidBounds::bv_maxHalfX] +
              m_boundValues[TrapezoidBounds::bv_halfY] *
                m_boundValues[TrapezoidBounds::bv_halfY]);
}

inline bool
TrapezoidBounds::inside(const Amg::Vector2D& locpo,
                        const BoundaryCheck& bchk) const
{
  if (bchk.bcType == 0)
    return TrapezoidBounds::inside(
      locpo, bchk.toleranceLoc1, bchk.toleranceLoc2);

  // a fast FALSE
  double fabsY = fabs(locpo[Trk::locY]);
  double max_ell = bchk.lCovariance(0, 0) > bchk.lCovariance(1, 1)
                     ? bchk.lCovariance(0, 0)
                     : bchk.lCovariance(1, 1);
  double limit = bchk.nSigmas * sqrt(max_ell);
  if (fabsY > (m_boundValues[TrapezoidBounds::bv_halfY] + limit))
    return false;
  // a fast FALSE
  double fabsX = fabs(locpo[Trk::locX]);
  if (fabsX > (m_boundValues[TrapezoidBounds::bv_maxHalfX] + limit))
    return false;
  // a fast TRUE
  double min_ell = bchk.lCovariance(0, 0) < bchk.lCovariance(1, 1)
                     ? bchk.lCovariance(0, 0)
                     : bchk.lCovariance(1, 1);
  limit = bchk.nSigmas * sqrt(min_ell);
  if (fabsX < (m_boundValues[TrapezoidBounds::bv_minHalfX] + limit) &&
      fabsY < (m_boundValues[TrapezoidBounds::bv_halfY] + limit))
    return true;

  // compute KDOP and axes for surface polygon
  std::vector<KDOP> elementKDOP(3);
  std::vector<Amg::Vector2D> elementP(4);
  float theta =
    (bchk.lCovariance(1, 0) != 0 &&
     (bchk.lCovariance(1, 1) - bchk.lCovariance(0, 0)) != 0)
      ? .5 * bchk.FastArcTan(2 * bchk.lCovariance(1, 0) /
                             (bchk.lCovariance(1, 1) - bchk.lCovariance(0, 0)))
      : 0.;
  sincosCache scResult = bchk.FastSinCos(theta);
  AmgMatrix(2, 2) rotMatrix;
  rotMatrix << scResult.cosC, scResult.sinC, -scResult.sinC, scResult.cosC;
  AmgMatrix(2, 2) normal;
  // cppcheck-suppress constStatement
  normal << 0, -1, 1, 0;
  // ellipse is always at (0,0), surface is moved to ellipse position and then
  // rotated
  Amg::Vector2D p;
  p = Amg::Vector2D (m_boundValues[TrapezoidBounds::bv_minHalfX],
                     -m_boundValues[TrapezoidBounds::bv_halfY]);
  elementP[0] = (rotMatrix * (p - locpo));
  p = Amg::Vector2D (-m_boundValues[TrapezoidBounds::bv_minHalfX],
                     -m_boundValues[TrapezoidBounds::bv_halfY]);
  elementP[1] = (rotMatrix * (p - locpo));
  scResult = bchk.FastSinCos(m_beta);
  p = Amg::Vector2D (m_boundValues[TrapezoidBounds::bv_minHalfX] +
                     (2. * m_boundValues[TrapezoidBounds::bv_halfY]) *
                     (scResult.sinC / scResult.cosC),
                     m_boundValues[TrapezoidBounds::bv_halfY]);
  elementP[2] = (rotMatrix * (p - locpo));
  scResult = bchk.FastSinCos(m_alpha);
  p = Amg::Vector2D (-(m_boundValues[TrapezoidBounds::bv_minHalfX] +
                       (2. * m_boundValues[TrapezoidBounds::bv_halfY]) *
                       (scResult.sinC / scResult.cosC)),
                     m_boundValues[TrapezoidBounds::bv_halfY]);
  elementP[3] = (rotMatrix * (p - locpo));
  std::vector<Amg::Vector2D> axis = { normal * (elementP[1] - elementP[0]),
                                      normal * (elementP[3] - elementP[1]),
                                      normal * (elementP[2] - elementP[0]) };
  bchk.ComputeKDOP(elementP, axis, elementKDOP);
  // compute KDOP for error ellipse
  std::vector<KDOP> errelipseKDOP(3);
  bchk.ComputeKDOP(bchk.EllipseToPoly(3), axis, errelipseKDOP);
  // check if KDOPs overlap and return result
  return bchk.TestKDOPKDOP(elementKDOP, errelipseKDOP);
}

inline bool
TrapezoidBounds::insideLoc1(const Amg::Vector2D& locpo, double tol1) const
{
  return (fabs(locpo[locX]) <
          m_boundValues[TrapezoidBounds::bv_maxHalfX] + tol1);
}

inline bool
TrapezoidBounds::insideLoc2(const Amg::Vector2D& locpo, double tol2) const
{
  return (fabs(locpo[locY]) < m_boundValues[TrapezoidBounds::bv_halfY] + tol2);
}

} // end of namespace

