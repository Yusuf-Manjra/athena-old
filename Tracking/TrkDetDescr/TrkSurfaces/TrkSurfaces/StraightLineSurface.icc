/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/
namespace Trk {

inline bool StraightLineSurface::operator==(const StraightLineSurface& sf) const
{
  return *this == static_cast<const Surface& >(sf);
}

/** Return the surface type */
inline SurfaceType
StraightLineSurface::type() const
{
  return StraightLineSurface::staticType;
}

/** Use the Surface as a ParametersBase constructor, from local parameters -
 * charged */
inline Surface::ChargedTrackParametersUniquePtr
StraightLineSurface::createUniqueTrackParameters(
  double l1,
  double l2,
  double phi,
  double theta,
  double qop,
  std::optional<AmgSymMatrix(5)> cov) const
{
  return std::make_unique<ParametersT<5, Charged, StraightLineSurface>>(
    l1, l2, phi, theta, qop, *this, std::move(cov));
}
/** Use the Surface as a ParametersBase constructor, from global parameters -
 * charged*/
inline Surface::ChargedTrackParametersUniquePtr
StraightLineSurface::createUniqueTrackParameters(
  const Amg::Vector3D& position,
  const Amg::Vector3D& momentum,
  double charge,
  std::optional<AmgSymMatrix(5)> cov) const
{
  return std::make_unique<ParametersT<5, Charged, StraightLineSurface>>(
    position, momentum, charge, *this, std::move(cov));
}

/** Use the Surface as a ParametersBase constructor, from local parameters -
 * neutral */
inline Surface::NeutralTrackParametersUniquePtr
StraightLineSurface::createUniqueNeutralParameters(
  double l1,
  double l2,
  double phi,
  double theta,
  double qop,
  std::optional<AmgSymMatrix(5)> cov) const
{
  return std::make_unique<ParametersT<5, Neutral, StraightLineSurface>>(
    l1, l2, phi, theta, qop, *this, std::move(cov));
}

/** Use the Surface as a ParametersBase constructor, from global parameters -
 * neutral */
inline Surface::NeutralTrackParametersUniquePtr
StraightLineSurface::createUniqueNeutralParameters(
  const Amg::Vector3D& position,
  const Amg::Vector3D& momentum,
  double charge,
  std::optional<AmgSymMatrix(5)> cov) const
{
  return std::make_unique<ParametersT<5, Neutral, StraightLineSurface>>(
    position, momentum, charge, *this, std::move(cov));
}

template<int DIM, class T>
std::unique_ptr<ParametersT<DIM, T, StraightLineSurface>>
StraightLineSurface::createUniqueParameters(
  double l1,
  double l2,
  double phi,
  double theta,
  double qop,
  std::optional<AmgSymMatrix(DIM)> cov) const
{
  return std::make_unique<ParametersT<DIM, T, StraightLineSurface>>(
    l1, l2, phi, theta, qop, *this, std::move(cov));
}

/** Use the Surface as a ParametersBase constructor, from global parameters */
template<int DIM, class T>
std::unique_ptr<ParametersT<DIM, T, StraightLineSurface>>
StraightLineSurface::createUniqueParameters(
  const Amg::Vector3D& position,
  const Amg::Vector3D& momentum,
  double charge,
  std::optional<AmgSymMatrix(DIM)> cov) const
{
  return std::make_unique<ParametersT<DIM, T, StraightLineSurface>>(
    position, momentum, charge, *this, std::move(cov));
}

/** Use the Surface as a ParametersBase constructor, from local parameters */
template<int DIM, class T>
ParametersT<DIM, T, StraightLineSurface>
StraightLineSurface::createParameters(
  double l1,
  double l2,
  double phi,
  double theta,
  double qop,
  std::optional<AmgSymMatrix(DIM)> cov) const
{
  return ParametersT<DIM, T, StraightLineSurface>(
    l1, l2, phi, theta, qop, *this, std::move(cov));
}

/** Use the Surface as a ParametersBase constructor, from global parameters */
template<int DIM, class T>
ParametersT<DIM, T, StraightLineSurface>
StraightLineSurface::createParameters(
  const Amg::Vector3D& position,
  const Amg::Vector3D& momentum,
  double charge,
  std::optional<AmgSymMatrix(DIM)> cov) const
{
  return ParametersT<DIM, T, StraightLineSurface>(
    position, momentum, charge, *this, std::move(cov));
}

inline StraightLineSurface*
StraightLineSurface::clone() const
{
  return new StraightLineSurface(*this);
}

inline std::unique_ptr<StraightLineSurface> 
StraightLineSurface::uniqueClone() const{
  return std::unique_ptr<StraightLineSurface>(clone());
}

inline const SurfaceBounds&
StraightLineSurface::bounds() const
{
  if (m_bounds.get())
    return *(m_bounds.get());
  if (Surface::m_associatedDetElement &&
      Surface::m_associatedDetElementId.is_valid()) {
    return m_associatedDetElement->bounds(Surface::m_associatedDetElementId);
  }
  if (Surface::m_associatedDetElement)
    return m_associatedDetElement->bounds();
  return s_boundless;
}

inline bool
StraightLineSurface::insideBounds(const Amg::Vector2D& locpos,
                                  double tol1,
                                  double tol2) const
{
  if (!(m_bounds.get()) && !Surface::m_associatedDetElement)
    return true;
  return (std::abs(locpos[locR]) < bounds().r() + tol1 &&
          bounds().insideLoc2(locpos, tol2));
}

inline bool
StraightLineSurface::insideBoundsCheck(const Amg::Vector2D& locpos,
                                       const BoundaryCheck& bchk) const
{
  return StraightLineSurface::insideBounds(
    locpos, bchk.toleranceLoc1, bchk.toleranceLoc2);
}

inline const Amg::Vector3D&
StraightLineSurface::lineDirection() const
{
  if (!m_lineDirection.isValid()) {
    m_lineDirection.set(transform().rotation().col(2));
  }
  return *(m_lineDirection.ptr());
}

/** the pathCorrection for derived classes with thickness */
inline double
StraightLineSurface::pathCorrection(const Amg::Vector3D&,
                                    const Amg::Vector3D&) const
{
  return 1.;
}

/** Return properly formatted class name for screen output */
inline std::string
StraightLineSurface::name() const
{
  return "Trk::StraightLineSurface";
}

}
