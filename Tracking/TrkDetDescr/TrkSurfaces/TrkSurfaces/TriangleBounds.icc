/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {

inline TriangleBounds*
TriangleBounds::clone() const
{
  return new TriangleBounds(*this);
}

inline bool
TriangleBounds::inside(const Amg::Vector2D& locpo,
                       double tol1,
                       double tol2) const
{
  std::pair<double, double> locB(m_boundValues[TriangleBounds::bv_x2] -
                                   m_boundValues[TriangleBounds::bv_x1],
                                 m_boundValues[TriangleBounds::bv_y2] -
                                   m_boundValues[TriangleBounds::bv_y1]);
  std::pair<double, double> locT(
    m_boundValues[TriangleBounds::bv_x3] - locpo[0],
    m_boundValues[TriangleBounds::bv_y3] - locpo[1]);
  std::pair<double, double> locV(
    m_boundValues[TriangleBounds::bv_x1] - locpo[0],
    m_boundValues[TriangleBounds::bv_y1] - locpo[1]);

  // special case :: third vertex ?
  if (locT.first * locT.first + locT.second * locT.second < tol1 * tol1)
    return true;

  // special case : lies on base ?
  double db = locB.first * locV.second - locB.second * locV.first;
  if (fabs(db) < tol1) {
    double a =
      (locB.first != 0) ? -locV.first / locB.first : -locV.second / locB.second;
    return a > -tol2 && a - 1. < tol2;
  }

  double dn = locB.first * locT.second - locB.second * locT.first;

  if (fabs(dn) > fabs(tol1)) {
    double t = (locB.first * locV.second - locB.second * locV.first) / dn;
    if (t > 0.)
      return false;

    double a = (locB.first != 0.)
                 ? (t * locT.first - locV.first) / locB.first
                 : (t * locT.second - locV.second) / locB.second;
    if (a < -tol2 || a - 1. > tol2)
      return false;
  } else {
    return false;
  }
  return true;
}

inline bool
TriangleBounds::inside(const Amg::Vector2D& locpo,
                       const BoundaryCheck& bchk) const
{
  if (bchk.bcType == 0)
    return TriangleBounds::inside(
      locpo, bchk.toleranceLoc1, bchk.toleranceLoc2);

  // a fast FALSE
  double fabsR = sqrt(locpo[Trk::locX] * locpo[Trk::locX] +
                      locpo[Trk::locY] * locpo[Trk::locY]);
  double max_ell = bchk.lCovariance(0, 0) > bchk.lCovariance(1, 1)
                     ? bchk.lCovariance(0, 0)
                     : bchk.lCovariance(1, 1);
  double limit = bchk.nSigmas * sqrt(max_ell);
  double r_max = TriangleBounds::r();
  if (fabsR > (r_max + limit))
    return false;

  // compute KDOP and axes for surface polygon
  std::vector<KDOP> elementKDOP(3);
  std::vector<Amg::Vector2D> elementP(3);
  float theta =
    (bchk.lCovariance(1, 0) != 0 &&
     (bchk.lCovariance(1, 1) - bchk.lCovariance(0, 0)) != 0)
      ? .5 * bchk.FastArcTan(2 * bchk.lCovariance(1, 0) /
                             (bchk.lCovariance(1, 1) - bchk.lCovariance(0, 0)))
      : 0.;
  sincosCache scResult = bchk.FastSinCos(theta);
  AmgMatrix(2, 2) rotMatrix;
  rotMatrix << scResult.cosC, scResult.sinC, -scResult.sinC, scResult.cosC;
  AmgMatrix(2, 2) normal;
  // cppcheck-suppress constStatement
  normal << 0, -1, 1, 0;
  // ellipse is always at (0,0), surface is moved to ellipse position and then
  // rotated
  Amg::Vector2D p;
  p << m_boundValues[TriangleBounds::bv_x1],
    m_boundValues[TriangleBounds::bv_y1];
  elementP[0] = (rotMatrix * (p - locpo));
  p << m_boundValues[TriangleBounds::bv_x2],
    m_boundValues[TriangleBounds::bv_y2];
  elementP[1] = (rotMatrix * (p - locpo));
  p << m_boundValues[TriangleBounds::bv_x3],
    m_boundValues[TriangleBounds::bv_y3];
  elementP[2] = (rotMatrix * (p - locpo));
  std::vector<Amg::Vector2D> axis = { normal * (elementP[1] - elementP[0]),
                                      normal * (elementP[2] - elementP[1]),
                                      normal * (elementP[2] - elementP[0]) };
  bchk.ComputeKDOP(elementP, axis, elementKDOP);
  // compute KDOP for error ellipse
  std::vector<KDOP> errelipseKDOP(3);
  bchk.ComputeKDOP(bchk.EllipseToPoly(3), axis, errelipseKDOP);
  // check if KDOPs overlap and return result
  return bchk.TestKDOPKDOP(elementKDOP, errelipseKDOP);
}

inline bool
TriangleBounds::insideLoc1(const Amg::Vector2D& locpo, double tol1) const
{
  return inside(locpo, tol1, tol1);
}

inline bool
TriangleBounds::insideLoc2(const Amg::Vector2D& locpo, double tol2) const
{
  return inside(locpo, tol2, tol2);
}

inline std::vector<std::pair<TDD_real_t, TDD_real_t>>
TriangleBounds::vertices() const
{
  std::vector<std::pair<TDD_real_t, TDD_real_t>> vertices;
  vertices.resize(3);
  for (size_t iv = 0; iv < 3; iv++)
    vertices.emplace_back(m_boundValues[2 * iv], m_boundValues[2 * iv + 1]);
  return vertices;
}

inline double
TriangleBounds::r() const
{
  double rmax = 0.;
  for (size_t iv = 0; iv < 3; iv++)
    rmax = fmax(rmax,
                m_boundValues[2 * iv] * m_boundValues[2 * iv] +
                  m_boundValues[2 * iv + 1] * m_boundValues[2 * iv + 1]);
  return sqrt(rmax);
}

} // end of namespace

