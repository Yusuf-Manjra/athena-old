/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/
/**
 * @file AthenaPoolCnvSvc/T_AthenaPoolxAODCnv.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Jan, 2016
 * @brief Athena pool converter for xAOD classes.
 */


#include "AthContainers/tools/copyThinned.h"
#include "AthenaKernel/getThinningCache.h"


namespace DMTest {
class BAuxVec;
}
namespace SG {
DMTest::BAuxVec* copyThinned (DMTest::BAuxVec& v,
                              const SG::ThinningInfo* dec);
}


/**
 * @brief Constructor.
 * @param svcLoc Gaudi service locator.
 */
template <class XAOD, class ... TPCNVS>
T_AthenaPoolxAODCnv<XAOD, TPCNVS...>::T_AthenaPoolxAODCnv( ISvcLocator* svcLoc )
  : Base( svcLoc ),
    m_guid (AthenaPoolCnvSvc::guidFromTypeinfo (typeid (XAOD)))
{
}


/**
 * @brief Convert a transient object to persistent form.
 * @param trans The transient object to convert.
 * @param key The SG key of the object being written.
 *
 * Returns a newly-allocated persistent object.
 */
template <class XAOD, class ... TPCNVS>
XAOD*
T_AthenaPoolxAODCnv<XAOD, TPCNVS...>::createPersistentWithKey( XAOD* trans,
                                                               const std::string& key)
{
  AthenaPoolCnvSvc::debugCreatePersistent (ClassID_traits<XAOD>::ID());
  const SG::ThinningInfo* info = SG::getThinningInfo (key);
  return SG::copyThinned (*trans, info).release();
}


/**
 * @brief Read the persistent object and convert it to transient.
 * @param key The SG key of the object being read.
 *
 * Returns a newly-allocated transient object.
 * Errors are reported by raising exceptions.
 */
template <class XAOD, class ... TPCNVS>
XAOD*
T_AthenaPoolxAODCnv<XAOD, TPCNVS...>::createTransientWithKey (const std::string& key)
{
  AthenaPoolCnvSvc::debugCreateTransient (ClassID_traits<XAOD>::ID());
  XAOD* c = nullptr;

  if ( this->compareClassGuid( m_guid ) ) {
    // It's the latest version, read it directly:
    c = this->template poolReadObject< XAOD >();
  }
  else {
    // Try a converter.
    c = m_tpcnvs.createTransient (*this, key, this->msg()).release();
  }

  if (c) {
    if (c->trackIndices()) {
      DataLink< SG::IConstAuxStore > dl;
      dl.toTransient (key + "Aux.");
      c->setStore( dl );
    }
    return c;
  }

  // Didn't recognize the GUID.
  AthenaPoolCnvSvc::throwExcUnsupportedVersion (typeid(XAOD),
                                                this->m_i_poolToken->classID());
  return 0;
}
