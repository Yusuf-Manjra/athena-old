//Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2019 CERN for the benefit of the ATLAS collaboration
*/

#include "GaudiKernel/MsgStream.h"
#include "ByteStreamCnvSvcBase/ByteStreamAddress.h"

#include <string>

template< class DATATYPE >
TBDataCnv<DATATYPE>::TBDataCnv(ISvcLocator* svcloc) :
  Converter(storageType(), classID(),svcloc),
  m_tool(nullptr)
{
}

template< class DATATYPE >
const CLID& TBDataCnv<DATATYPE>::classID(){
  return ClassID_traits<DATATYPE>::ID() ;
}

template< class DATATYPE >
long TBDataCnv<DATATYPE>::storageType(){
  return ByteStreamAddress::storageType() ;
}

template< class DATATYPE >
StatusCode TBDataCnv<DATATYPE>::initialize()
{StatusCode sc = Converter::initialize(); 
 if (sc!=StatusCode::SUCCESS)
    return sc; 
 MsgStream logstr(msgSvc(), "TBDataCnv");
 IToolSvc* toolSvc;
 sc=service("ToolSvc",toolSvc);
 if(sc!=StatusCode::SUCCESS)
   {logstr << MSG::ERROR << " Can't get ToolSvc " << endmsg;
    return sc;
   }
 sc=toolSvc->retrieveTool("TBByteStreamCnvTool",m_tool);
  if(sc!=StatusCode::SUCCESS)
   {logstr << MSG::ERROR << " Can't get TBByteStreamCnvTool" << endmsg;
    return sc;
   }
  return StatusCode::SUCCESS;
}

template< class DATATYPE >
StatusCode TBDataCnv<DATATYPE>::createObj(IOpaqueAddress* pAddr, DataObject*& pObj) 
{ MsgStream logstr(msgSvc(), "TBDataCnv");
  ByteStreamAddress *pRE_Addr;
  pRE_Addr = dynamic_cast<ByteStreamAddress*>(pAddr); //Cast from OpaqueAddress to ByteStreamAddress
  if (!pRE_Addr)
    {logstr << MSG::ERROR << "dynamic_cast of IOpaqueAdress to ByteStreamAddress failed!" << endmsg;
     return StatusCode::FAILURE;
    }
  DATATYPE* tbdata = 0;
  const std::string& key = *(pAddr->par()); // Get key used in the 
                                            // StoreGateSvc::retrieve function
  StatusCode sc=m_tool->ReadFragment(tbdata,key);
  if (sc!=StatusCode::SUCCESS) {
    delete tbdata;
    return sc;
  }
  pObj = SG::asStorable(tbdata) ;
  return StatusCode::SUCCESS;
}

template< class DATATYPE >
StatusCode TBDataCnv<DATATYPE>::createRep(DataObject* pObj, IOpaqueAddress*& pAddr)
{  
  std::string nm = pObj->registry()->name(); 
  ByteStreamAddress* addr = new ByteStreamAddress(classID(),nm,""); 
  pAddr = addr; 

  return m_tool->WriteFragment();

}
