/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

/**
 * @file  AthenaKernel/DataBucketBase.icc
 * @author scott snyder
 * @date Nov 2005
 * @brief A non-templated base class for DataBucket, allows to access the
 *        transient object address as a void*
 *        Implementation file.
 */

#include "AthenaKernel/ClassID_traits.h"
#include <type_traits>
#include <typeinfo>


/**
 * @brief Return the contents of the @c DataBucket,
 *        converted to type @a T.  Note that only
 *        derived->base conversions are allowed here.
 *        @a T must have a valid Class ID for this to work.
 * @param irt To be called if we make a new instance.
 * @param isConst True if the object being converted is regarded as const.
 */
template <class T>
T* DataBucketBase::cast (SG::IRegisterTransient* irt /*= 0*/,
                         bool isConst /*= true*/)
{
  using T_nc = std::remove_const_t<T>;
  const CLID clid = ClassID_traits<T_nc>::ID();
  return reinterpret_cast<T*> (cast (clid, typeid(T_nc), irt, isConst));
}


/**
 * @brief Return the contents of the @c DataBucket,
 *        converted to type given by @a clid.  Note that only
 *        derived->base conversions are allowed here.
 * @param clid The class ID to which to convert.
 * @param tinfo The @a std::type_info of the type to which to convert.
 * @param irt To be called if we make a new instance.
 * @param isConst True if the object being converted is regarded as const.
 *
 * This allows the callee to choose whether to use clid or tinfo.
 * By default, this uses type_info,.
 */
inline
void* DataBucketBase::cast (CLID /*clid*/,
                            const std::type_info& tinfo,
                            SG::IRegisterTransient* irt /*= 0*/,
                            bool isConst /*= true*/)
{
  return cast (tinfo, irt, isConst);
}
