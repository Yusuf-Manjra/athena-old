/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

/** @file ElementLinkCnv_p1.icc
 *  @brief This file contains the implementation for the ElementLinkCnv_p1 template methods.
 *  @author Marcin.Nowak@cern.ch
 **/

#include <stdexcept>

#include "AthLinks/ElementLink.h"
#include "AthenaKernel/ThinningCache.h"
#include "AthenaKernel/ThinningDecisionBase.h"
#include "AthenaKernel/getThinningCache.h"
//#define ELLINK_DEBUG


template <typename LINK_TYPE>
void ElementLinkCnv_p1<LINK_TYPE>::
transToPers(const Link_t& trans, PersLink_t& pers,
            const SG::ThinningCache* cache,
            [[maybe_unused]] MsgStream& msg) const
{
#ifdef  ELLINK_DEBUG
//  trans.printState();
#endif
  if( trans.isDefault() ) {
     //   pers.m_contName <- empty string (default value)
     pers.m_elementIndex = 0; // value not used, but 0 compresses better
     return;
  }

  // Check for thinning.
  if (cache) {
    const SG::ThinningDecisionBase* dec = cache->thinning (trans.key());
    if (dec) {
      // here is the problem: in case the ElementLink was directly created w/
      // only a pointer to the element, _and_ if the the pointed at element 
      // has been thinned away, EL::index() will throw b/c
      // IndexingPolicy::setIndex will fail.
      std::size_t idx = SG::ThinningDecisionBase::RemovedIdx;
      try {
        idx = trans.index();
      } catch ( const SG::maybe_thinning_error& err ) {
        // ok. that's the corner case we talked about above.
#ifdef  ELLINK_DEBUG
      msg << MSG::DEBUG << "caught a maybe_thinning_error: ["
          << err.what() << "]"
          << endmsg
          << "(this is an expected case of the EL-state-phase-space "
          << "when thinning is active)"
          << endmsg;
#endif
      }
      // Get the updated index:
      const std::size_t persIdx = dec->index( idx );
      if (SG::ThinningDecisionBase::RemovedIdx == persIdx) {
        // this element has been thinned away. So the persistent equivalent
        // of a null pointer is a default persistent pointer.
        pers = PersLink_t();
        pers.m_elementIndex = 0; // value not used, but 0 compresses better
      }
      else {
        Link_t tmp = trans;
        tmp.toPersistent();
        pers.m_SGKeyHash       = tmp.key();
        pers.m_elementIndex    = persIdx;
      }
#ifdef  ELLINK_DEBUG
      msg << MSG::INFO << "ElementLinkCnv_p1::transToPers(): SG Container="
          << ", Key Hash=" << pers.m_SGKeyHash
          << ", IDX=" << pers.m_elementIndex << endmsg;
#endif
      return;
    }
  }

  // No thinning.
  Link_t tmp = trans;
  tmp.toPersistent();
  // pers.m_contName      = tmp.dataID();
  pers.m_SGKeyHash        = tmp.key();
  pers.m_elementIndex     = tmp.index();
#ifdef  ELLINK_DEBUG
  msg << MSG::INFO << "ElementLinkCnv_p1::transToPers(): SG Container="
      <<  pers->m_contName << ", Key Hash=" << pers->m_SGKeyHash
      << ", IDX=" << pers->m_elementIndex << endmsg;
#endif
}


template <typename LINK_TYPE>
void ElementLinkCnv_p1<LINK_TYPE>::
transToPers(const Link_t& trans, PersLink_t& pers,
            MsgStream& msg) const
{
  transToPers (trans, pers,
               SG::getThinningCache(),
               msg);
}


template <typename LINK_TYPE >
void ElementLinkCnv_p1< LINK_TYPE >
::persToTrans(const PersLink_t& pers, Link_t& trans,
              [[maybe_unused]] MsgStream& msg) const
{
   if( !pers.m_contName.empty() ) {
#ifdef  ELLINK_DEBUG
      msg << MSG::DEBUG << "ElementLinkCnv_p1::PersToTrans(): SGContainer="
	  << pers.m_contName << ", IDX=" << pers.m_elementIndex << endmsg;
#endif
      trans = Link_t(pers.m_contName, pers.m_elementIndex);
   }
   else if( pers.m_SGKeyHash != 0 ) {
#ifdef  ELLINK_DEBUG
      msg << MSG::DEBUG << "ElementLinkCnv_p1::PersToTrans(): SGContainer hash="
	  << pers.m_SGKeyHash << ", IDX=" << pers.m_elementIndex << endmsg;
#endif
      trans = Link_t( (typename Link_t::sgkey_t)pers.m_SGKeyHash, pers.m_elementIndex);
   }
   else {
#ifdef  ELLINK_DEBUG
      msg << MSG::DEBUG << "ElementLinkCnv_p1::PersToTrans(): reading EL in Default state" << endmsg;
#endif
      // set the transient ELink to the default state.
      trans.reset();
   } 
}



template <typename LINK_TYPE >
inline
void ElementLinkCnv_p1< LINK_TYPE >::
transToPers(const Link_t* trans, PersLink_t* pers, MsgStream& log) const {
   transToPers( *trans, *pers, log);
}


template <typename LINK_TYPE >
inline
void ElementLinkCnv_p1< LINK_TYPE >::
persToTrans(const PersLink_t* pers, Link_t* trans, MsgStream& log) const {
   persToTrans( *pers, *trans, log);
}
