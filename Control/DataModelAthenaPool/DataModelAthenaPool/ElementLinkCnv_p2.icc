/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

/** @file ElementLinkCnv_p2.icc
 *  @brief This file contains the implementation for the ElementLinkCnv_p2 template methods.
 *  @author R.D.Schaffer@cern.ch
 **/

#include <stdexcept>

#include "AthLinks/ElementLink.h"
#include "ElementLinkContNames_p2.h"
#include "AthenaKernel/ThinningCache.h"
#include "AthenaKernel/ThinningDecisionBase.h"
#include "AthenaKernel/getThinningCache.h"

//#define ELLINK_DEBUG


template <typename LINK_TYPE>
inline
ElementLinkCnv_p2<LINK_TYPE>::State::State()
{
  // Init both last names
  m_lastNameFound = defaultLastName();
  m_lastNameAdded = *m_lastNameFound;
}


template <typename LINK_TYPE>
inline
ElementLinkCnv_p2<LINK_TYPE>::State::State (ElementLinkContNames_p2& lookupTable)
{
  reset (lookupTable);
}


template <typename LINK_TYPE>
inline
ElementLinkCnv_p2<LINK_TYPE>::State::State (const ElementLinkContNames_p2& lookupTable)
{
  reset (lookupTable);
}


template <typename LINK_TYPE>
inline
const std::string* 
ElementLinkCnv_p2<LINK_TYPE>::State::defaultLastName () const
{
    static const std::string lastName = "NO LAST NAME";
    return &lastName;
}


template <typename LINK_TYPE>
inline
void
ElementLinkCnv_p2<LINK_TYPE>::State::reset(ElementLinkContNames_p2& lookupTable)
{
    // Save lookup table and reset element link index and map
    m_lookupTable      = &lookupTable;
    m_clookupTable     = 0;
    m_nameIndexMap.clear();
    m_lastNameFound    = defaultLastName();
    m_lastNameAdded    = *m_lastNameFound;
    m_lastNameIndex    = 0;
}


template <typename LINK_TYPE>
inline
void
ElementLinkCnv_p2<LINK_TYPE>::State::reset(const ElementLinkContNames_p2& lookupTable)
{
    // Save lookup table and reset element link index and map
    m_lookupTable      = 0;
    m_clookupTable     = &lookupTable;
    m_nameIndexMap.clear();
    m_lastNameFound    = defaultLastName();
    m_lastNameAdded    = *m_lastNameFound;
    m_lastNameIndex    = 0xFFFFFFFF;
}


//********************************************************************


template <typename LINK_TYPE>
inline
ElementLinkCnv_p2<LINK_TYPE>::
ElementLinkCnv_p2()
  : m_isPersistible (false)
{
}


template <typename LINK_TYPE>
inline
ElementLinkCnv_p2<LINK_TYPE>::
ElementLinkCnv_p2(bool isPersistible)
  : m_isPersistible (isPersistible)
{
}


template <typename LINK_TYPE>
void ElementLinkCnv_p2<LINK_TYPE>::
transToPers (State& state,
             const Link_t& trans,
             PersLink_t& pers,
             const SG::ThinningCache* cache,
             [[maybe_unused]] MsgStream& msg) const
{
#ifdef  ELLINK_DEBUG
//    trans.printState();
#endif

  static const std::string s_empty = "";
  if( trans.isDefault() ) {
    pers.m_contIndex    = getNameIndex(state, s_empty); // Must save empty string for default EL
    pers.m_elementIndex = 0; // value not used, but 0 compresses better
    return;
  }

  // Check for thinning.
  if (cache) {
    const SG::ThinningDecisionBase* dec = cache->thinning (trans.key());
    if (dec) {
      // here is the problem: in case the ElementLink was directly created w/
      // only a pointer to the element, _and_ if the the pointed-at element 
      // has been thinned away, EL::index() will throw b/c
      // IndexingPolicy::setIndex will fail.
      std::size_t idx = SG::ThinningDecisionBase::RemovedIdx;
      try {
        idx = trans.index();
      } catch ( const SG::maybe_thinning_error& err ) {
        // ok. that's the corner case we talked about above.
#ifdef  ELLINK_DEBUG
      msg << MSG::DEBUG << "caught a maybe_thinning_error: ["
          << err.what() << "]"
          << endmsg
          << "(this is an expected case of the EL-state-phase-space "
          << "when thinning is active)"
          << endmsg;
#endif
      }
      // Get the updated index:
      const std::size_t persIdx = dec->index( idx );
      if (SG::ThinningDecisionBase::RemovedIdx == persIdx) {
        // this element has been thinned away. So the persistent equivalent
        // of a null pointer is a default persistent pointer.
	  
        // Must save empty string for default EL
        pers.m_contIndex    = getNameIndex(state, s_empty); 
        // Index value not used, but 0 compresses better
        pers.m_elementIndex = 0; 
      }
      else {
        Link_t tmp = trans;
        if (!m_isPersistible) {
          tmp.toPersistent();
        }
        if (!state.m_lookupTable) {
#ifdef  ELLINK_DEBUG
          msg << MSG::ERROR 
              << "Empty link name table ptr - must use resetForCnv "
              << endmsg;
#endif
        }
        else {
          // Save container name index and element link index
          pers.m_contIndex     = getNameIndex(state, tmp.dataID());
          pers.m_elementIndex  = persIdx;
        }
      }
#ifdef  ELLINK_DEBUG
      msg << MSG::INFO << "ElementLinkCnv_p3::transToPer(): SG Container="
          << ", Key Hash=" << pers.m_SGKeyHash
          << ", IDX=" << pers.m_elementIndex << endmsg;
#endif
      return;
    }
  }

  Link_t tmp = trans;
  if (!m_isPersistible) {
    tmp.toPersistent();
  }
  // convert string to index
  if (!state.m_lookupTable) {
#ifdef  ELLINK_DEBUG
    msg << MSG::ERROR
        << "Empty link name table ptr - must use resetForCnv " 
        << endmsg;
#endif
  }
  else {
    // Save container name index and element link index
    pers.m_contIndex     = getNameIndex(state, tmp.dataID());
    pers.m_elementIndex  = SG::sgkeyShort (tmp.index());
  }
#ifdef  ELLINK_DEBUG
  msg << MSG::DEBUG << "ElementLinkCnv_p2::transToPer(): KEY= "
      <<  trans.dataID() << ", IDX= " << trans.index() 
      <<  ", pers cont index= " << pers.m_contIndex
      <<  ", ele index= " << pers.m_elementIndex
      << endmsg;
#endif
}


template <typename LINK_TYPE>
void ElementLinkCnv_p2<LINK_TYPE>::
transToPers (State& state,
             const Link_t& trans,
             PersLink_t& pers,
             MsgStream& msg) const
{
  transToPers (state, trans, pers,
               SG::getThinningCache(),
               msg);
}


template <typename LINK_TYPE >
inline
void ElementLinkCnv_p2< LINK_TYPE >
::persToTrans(State& state,
              const PersLink_t& pers,
              Link_t& trans,
              MsgStream& log) const
{
    // convert index to string
    const std::string* contName = 0;
    // Get container name from name index
    getContName(state, pers.m_contIndex, contName, log);
#ifdef  ELLINK_DEBUG
    if (contName) {
        log << MSG::DEBUG << "ElementLinkCnv_p2::PersToTrans(): container name" << 
            (*contName) << endmsg;
    }
    else {
        log << MSG::ERROR << "ElementLinkCnv_p2::PersToTrans(): container name EMPTY"
            << endmsg;
    }
#endif
    if( contName->empty() ) {
        // If container name is empty, this is a default ElementLink
        // To be safe, reset to the default state, e.g. may be reusing
        // existing EL from DataPool
	trans.reset();
#ifdef  ELLINK_DEBUG
	log << MSG::DEBUG << "ElementLinkCnv_p2::PersToTrans(): reading EL in Default state" << endmsg;
#endif
    } else {
	// reset trans ELink with key and index - changeds to identified state
	trans.resetWithKeyAndIndex((*contName), pers.m_elementIndex);

#ifdef  ELLINK_DEBUG
	log << MSG::DEBUG << "ElementLinkCnv_p2::PersToTrans(): KEY="
	    << (*contName) << ", IDX=" << pers.m_elementIndex << endmsg;
	if ((*contName) == "NO LAST NAME") {
	    log << MSG::ERROR << "ElementLinkCnv_p2::PersToTrans(): INCORRECT KEY  KEY="
		<< (*contName) << ", IDX=" << pers.m_elementIndex << endmsg;
	}
#endif
    }
}


template <typename LINK_TYPE>
inline
void
ElementLinkCnv_p2<LINK_TYPE>::resetForCnv(ElementLinkContNames_p2& lookupTable)
{
  // Save lookup table and reset element link index and map
  m_state.reset (lookupTable);
}

template <typename LINK_TYPE>
inline
void
ElementLinkCnv_p2<LINK_TYPE>::resetForCnv(const ElementLinkContNames_p2& lookupTable)
{
  // Save lookup table and reset element link index and map
  m_state.reset (lookupTable);
}

template <typename LINK_TYPE>
inline
void ElementLinkCnv_p2<LINK_TYPE>::
transToPers(const Link_t* trans, PersLink_t* pers,
            [[maybe_unused]] MsgStream& log)
{
  transToPers (m_state, *trans, *pers, log);
}


template <typename LINK_TYPE >
inline
void ElementLinkCnv_p2< LINK_TYPE >
::persToTrans(const PersLink_t* pers, Link_t* trans, MsgStream& log)
{
  persToTrans (m_state, *pers, *trans, log);
}




template <typename LINK_TYPE >
inline		
void ElementLinkCnv_p2< LINK_TYPE >::
persToTrans(const PersLink_t& pers, Link_t& trans, MsgStream& log)  {
  persToTrans( m_state, pers, trans, log);
}


template <typename LINK_TYPE >
inline
void ElementLinkCnv_p2< LINK_TYPE >::
transToPers(const Link_t& trans, PersLink_t& pers, MsgStream& log)  {
  transToPers( m_state, trans, pers, log);
}


template <typename LINK_TYPE >
inline
unsigned int
ElementLinkCnv_p2< LINK_TYPE >::getNameIndex    (State& state,
                                                 const std::string& name) const
{
    // Add this name to the lookup table, retrieving and index. 

    unsigned int nameIndex;

    // Only need to save name if container name has
    // changed for this element link
    if (name == state.m_lastNameAdded) return (state.m_lastNameIndex);

    // check if name has already been added, if so use the index
    // found, other make a new entry

    // NOTE: the map is part of this converter object and not the
    // lookup table itself

    typename State::IndexMap::const_iterator it =
      state.m_nameIndexMap.find(name);
    if (it != state.m_nameIndexMap.end()) {
	nameIndex   =  (it->second);
    }
    else {
	// Add new name to lookup table and map
	nameIndex = state.m_lookupTable->m_names.size();
	state.m_lookupTable->m_names.push_back(name);
	state.m_nameIndexMap[name] = nameIndex;
    }

    // Save last name and index

    // Note: state.m_lastNameAdded is a copy of a string and not a ptr into
    // the lookup table. This is required because the lookup table may
    // be extended/reallocated elsewhere in memory and thus invalidate
    // ptrs into it.
    state.m_lastNameIndex = nameIndex;
    state.m_lastNameAdded = state.m_lookupTable->m_names[nameIndex];
    return (nameIndex);
}

template <typename LINK_TYPE >
inline
void
ElementLinkCnv_p2< LINK_TYPE >::getContName (State& state,
                                             unsigned int nameIndex, 
                                             std::string const *& name, 
                                             MsgStream& log) const
{

    // Only need to get new name if index has changed for this element
    // link
    if (nameIndex == state.m_lastNameIndex) {
        name = state.m_lastNameFound;
	return;
    }
    
    // Get the container name with the name index from the lookup table
    if (!state.m_clookupTable ||
        state.m_clookupTable->m_names.size() < nameIndex + 1)
    {
        if (!state.m_clookupTable) {
            log << MSG::ERROR << "Empty link name table ptr" << endmsg;
        }
        else {
            log << MSG::ERROR << "Empty name vector in lookup table - looking for index "
                << nameIndex << " size " << state.m_clookupTable->m_names.size() << endmsg;
        }
	return;
    }
    name = &(state.m_clookupTable->m_names[nameIndex]);

    // Save last name and index
    state.m_lastNameFound = name;
    state.m_lastNameIndex = nameIndex;
    return;
}
