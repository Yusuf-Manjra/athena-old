// This file's extension implies that it's C, but it's really -*- C++ -*-.
/*
  Copyright (C) 2002-2018 CERN for the benefit of the ATLAS collaboration
*/
/**
 * @file AthContainers/tools/AtomicConstAccessor.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Apr, 2018
 * @brief Access an auxiliary variable atomically.
 */


namespace SG {


/**
 * @brief Constructor.
 * @param name Name of this aux variable.
 *
 * The name -> auxid lookup is done here.
 */
template <class T>
inline
AtomicConstAccessor<T>::AtomicConstAccessor (const std::string& name)
  : Base (name, "", SG::AuxTypeRegistry::Flags::Atomic)
{
}


/**
 * @brief Constructor.
 * @param name Name of this aux variable.
 * @param clsname The name of its associated class.  May be blank.
 *
 * The name -> auxid lookup is done here.
 */
template <class T>
inline
AtomicConstAccessor<T>::AtomicConstAccessor (const std::string& name,
                                             const std::string& clsname)
  : Base (name, clsname, SG::AuxTypeRegistry::Flags::Atomic)
{
}


/**
 * @brief Fetch the variable for one element, as a const reference.
 * @param e The element for which to fetch the variable.
 *
 * As this class can be used only read-only for basic types, return
 * the result by value.  That makes it easier to call from python.
 */
template <class T>
inline
T AtomicConstAccessor<T>::operator() (const AuxElement& e) const
{
  return reinterpret_cast<const_reference_type> (Base::operator() (e));
}


/**
 * @brief Fetch the variable for one element, as a const reference.
 * @param container The container from which to fetch the variable.
 * @param index The index of the desired element.
 *
 * This allows retrieving aux data by container / index.
 * Looping over the index via this method will be faster then
 * looping over the elements of the container.
 *
 * As this class can be used only read-only for basic types, return
 * the result by value.  That makes it easier to call from python.
 */
template <class T>
inline
T AtomicConstAccessor<T>::operator() (const AuxVectorData& container,
                                      size_t index) const
{
  return reinterpret_cast<const_reference_type> (Base::operator() (container, index));
}


/**
 * @brief Get a pointer to the start of the auxiliary data array.
 * @param container The container from which to fetch the variable.
 */
template <class T>
inline
typename AtomicConstAccessor<T>::const_container_pointer_type
AtomicConstAccessor<T>::getDataArray (const AuxVectorData& container) const
{
  return reinterpret_cast<const_container_pointer_type>
    (container.getDataArray (Base::auxid()));
}


} // namespace SG
