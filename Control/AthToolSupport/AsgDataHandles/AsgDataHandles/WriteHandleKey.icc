/*
  Copyright (C) 2002-2019 CERN for the benefit of the ATLAS collaboration
*/

/**
 * @file AsgDataHandles/WriteHandleKey.icc
 * @author Nils Krumnack <Nils.Erik.Krumnack@cern.h>
 * @author scott snyder <snyder@bnl.gov> (for original version)
 * @brief Property holding a SG store/key/clid from which a WriteHandle is made.
 */


namespace SG {


/**
 * @brief Constructor.
 * @param key The StoreGate key for the object.
 * @param storeName Name to use for the store, if it's not encoded in sgkey.
 *
 * The provided key may actually start with the name of the store,
 * separated by a "+":  "MyStore+Obj".  If no "+" is present
 * the store named by @c storeName is used.
 */
template <class T>
WriteHandleKey<T>::WriteHandleKey (const std::string& key /*= ""*/)
                                   // const std::string& storeName /*= "StoreGateSvc"*/)
  : VarHandleKey (key)
  // : VarHandleKey (ClassID_traits<T>::ID(), key,
  //                 Gaudi::DataHandle::Writer,
  //                 storeName)
{
}


/**
 * @brief auto-declaring Property Constructor.
 * @param owner Owning component.
 * @param name name of the Property
 * @param key  default StoreGate key for the object.
 * @param doc Documentation string.
 *
 * will associate the named Property with this WHK via declareProperty
 *
 * The provided key may actually start with the name of the store,
 * separated by a "+":  "MyStore+Obj".  If no "+" is present
 * the store named by @c storeName is used.
 */
template <class T>
template <class OWNER, class K>
inline
WriteHandleKey<T>::WriteHandleKey( OWNER* owner,
                                   std::string name,
                                   const K& key /*= {}*/,
                                   std::string doc /*= ""*/)
  : WriteHandleKey<T> (key)
{
  owner->declareProperty(std::move(name), *this, std::move(doc));
}


/**
 * @brief Change the key of the object to which we're referring.
 * @param sgkey The StoreGate key for the object.
 * 
 * The provided key may actually start with the name of the store,
 * separated by a "+":  "MyStore+Obj".  If no "+" is present,
 * the store is not changed.
 */
template <class T>
WriteHandleKey<T>& WriteHandleKey<T>::operator= (const std::string& sgkey)
{
  VarHandleKey::operator= (sgkey);
  return *this;
}


} // namespace SG
