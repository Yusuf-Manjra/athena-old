/*
  Copyright (C) 2002-2019 CERN for the benefit of the ATLAS collaboration
*/

#ifndef ASGTOOLS_ASGTOOL_ICC
#define ASGTOOLS_ASGTOOL_ICC

#ifdef XAOD_STANDALONE

// Local include(s):
#include "AsgTools/PropertyMgr.h"
#include "AsgTools/TProperty.h"

namespace asg {

   template< class T >
   const T* AsgTool::getProperty( const std::string& name ) const {

      // Get the property object (if it exists):
     const Property* prop = m_properties->getProperty( name );
      if( ! prop ) {
         ATH_MSG_WARNING( "Property with name \"" << name << "\" not found" );
         return 0;
      }

      // Try to cast it to the required type:
      const TProperty< T >* tprop =
         dynamic_cast< const TProperty< T >* >( prop );
      if( ! tprop ) {
         ATH_MSG_WARNING( "Property \"" << name << "\" is of type: "
                          << prop->typeName() );
         return 0;
      }

      // Okay, we succeeded:
      return tprop->pointer();
   }

} // namespace asg

#endif // XAOD_STANDALONE

#ifndef XAOD_STANDALONE

// Gaudi/Athena include(s):
#include "Gaudi/Property.h"
#include "GaudiKernel/System.h"

using Property = Gaudi::Details::PropertyBase;

template <class TYPE, class VERIFIER = Gaudi::Details::Property::NullVerifier,
          class HANDLERS = Gaudi::Details::Property::UpdateHandler>
using PropertyWithValue  = Gaudi::Property<TYPE, VERIFIER, HANDLERS>;


namespace asg {

   template< class T >
   const T* AsgTool::getProperty( const std::string& name ) const {

      // Get the property object (if it exists):
     const Gaudi::Details::PropertyBase* prop = Gaudi::Utils::getProperty( this, name );
      if( ! prop ) {
         ATH_MSG_WARNING( "Property with name \"" << name << "\" not found" );
         return 0;
      }

      // Try to cast it to the required type:
      const PropertyWithValue< T >* tprop =
        dynamic_cast< const PropertyWithValue< T >* >( prop );
      if( ! tprop ) {
         ATH_MSG_WARNING( "Property \"" << name << "\" is of type: "
                          << System::typeinfoName( *( prop->type_info() ) ) );
         return 0;
      }

      // Okay, we succeeded:
      return &( tprop->value() );
   }

} // namespace asg

#endif // not XAOD_STANDALONE

#endif // not ASGTOOLS_ASGTOOL_ICC
