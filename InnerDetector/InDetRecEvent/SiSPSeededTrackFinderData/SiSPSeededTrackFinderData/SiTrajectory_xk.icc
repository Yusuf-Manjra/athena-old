/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

#include "TrkSurfaces/PlaneSurface.h"

/////////////////////////////////////////////////////////////////////////////////
// Inline methods
/////////////////////////////////////////////////////////////////////////////////

inline InDet::SiTrajectory_xk::SiTrajectory_xk()
{
  m_nElements      = 0 ;
  m_tools          = 0 ;
  m_firstElement   = 0 ;
  m_lastElement    = 0 ;
  m_nclusters      = 0 ;
  m_nclustersNoAdd = 0 ;
  m_difference     = 0 ;
  m_nHolesBefore        = 0 ;
  m_nHolesAfter        = 0 ; 
  m_nholes         = 0 ;
  m_dholes         = 0 ;
  m_nActiveElements     = 0 ;
  m_ndfcut         = 0 ;
  m_ndf            = 0 ;
  m_ntos           = 0 ;
  m_surfacedead    = 0 ;
}

inline InDet::SiTrajectory_xk::SiTrajectory_xk(const InDet::SiTrajectory_xk& T)
{
  *this = T;
}
  
inline InDet::SiTrajectory_xk& InDet::SiTrajectory_xk::operator = 
  (const InDet::SiTrajectory_xk& T) 
{
  m_firstElement     = T.m_firstElement   ;
  m_lastElement      = T.m_lastElement    ;
  m_nclusters        = T.m_nclusters      ; 
  m_ndfcut           = T.m_ndfcut         ;
  m_ndf              = T.m_ndf            ;
  m_ntos             = T.m_ntos           ;
  m_nclustersNoAdd   = T.m_nclustersNoAdd ; 
  m_nHolesBefore          = T.m_nHolesBefore        ;
  m_nHolesAfter          = T.m_nHolesAfter        ;
  m_nholes           = T.m_nholes         ;
  m_dholes           = T.m_dholes         ;
  m_nActiveElements       = T.m_nActiveElements     ;
  m_nElements        = T.m_nElements      ;
  m_tools            = T.m_tools          ;
  m_surfacedead.reset(T.m_surfacedead ? T.m_surfacedead->clone() : nullptr);

  for (int i=0; i!=m_nElements; ++i) {
    int            e =  T.m_elementsMap[i];
    m_elementsMap[i] = e                  ;
    m_elements   [e] = T.m_elements[e]    ; 
  }
  for (int i=0; i!=m_ntos; ++i) {
    m_atos[i] = T.m_atos[i];
    m_itos[i] = T.m_itos[i];
  }
  return(*this);
}

inline bool InDet::SiTrajectory_xk::isLastPixel()
{
  if (m_elements[m_elementsMap[m_lastElement]].ndf()==2) return true;
  return false;
} 

inline Trk::TrackParameters* InDet::SiTrajectory_xk::firstTrackParameters()
{
  return m_elements[m_elementsMap[m_firstElement]].trackParameters(false,1).release();
}
